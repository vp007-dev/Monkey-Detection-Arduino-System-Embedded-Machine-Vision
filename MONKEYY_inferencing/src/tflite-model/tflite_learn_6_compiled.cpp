/*
 * Copyright (c) 2025 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://edgeimpulse.com/legal/terms-of-service) or Enterprise Terms of
 * Service (https://edgeimpulse.com/legal/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 12.07.2025 08:31:05

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#if defined(EI_MODEL_SECTION) && (defined(__GNUC__) || defined(__clang__))
#define MODEL_SECTION(X) __attribute__((section(STRINGIZE_VALUE_OF(X))))
#else
#define MODEL_SECTION(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 242576;
#else
constexpr int kTensorArenaSize = 241552;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,1 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(8) int32_t tensor_data2[2] = { 12087, -10691, };
const TfArray<1, int> tensor_dimension2 = { 1, { 2 } };
const TfArray<2, float> quant2_scale = { 2, { 0.00034217743086628616, 0.00038683752063661814, } };
const TfArray<2, int> quant2_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data3[2*1*1*32] = { 
  /* [0][0][][] */ 47,-57,-67,75,-107,-10,-84,50,91,-62,-60,-39,-33,58,-76,10,90,-44,-68,-127,71,56,55,-82,-86,-111,-76,50,30,-124,-2,38, 
  /* [1][0][][] */ 76,93,91,-35,-46,93,15,36,-12,11,58,122,127,63,60,21,-14,24,-32,-60,-49,58,55,124,102,93,-21,18,72,-73,-122,7, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 2,1,1,32 } };
const TfArray<2, float> quant3_scale = { 2, { 0.0034416019916534424, 0.0038907905109226704, } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&g0::quant2_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data4[32] = { 1708, 1714, 1725, -1720, -1728, 1726, -1730, 1717, -1710, -1715, 1709, 1719, 1719, 1708, 1715, -1711, -1821, -1717, -1717, -1751, -1746, 1710, 1745, 1737, 1712, 1708, -1713, -1734, -1717, -1753, 1672, -1706, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 5.8544654166325927e-05, 5.8350487961433828e-05, 5.7960536651080474e-05, 5.8146859373664483e-05, 5.7882018154487014e-05, 5.7950339396484196e-05, 5.7771798310568556e-05, 5.824971231049858e-05, 5.8493671531323344e-05, 5.8279252698412165e-05, 5.8512468967819586e-05, 5.8159395848633721e-05, 5.8177414757665247e-05, 5.8529334637569264e-05, 5.8313664339948446e-05, 5.8427038311492652e-05, 5.492252967087552e-05, 5.806620538351126e-05, 5.823227547807619e-05, 5.7122484577121213e-05, 5.7285153161501512e-05, 5.847672582603991e-05, 5.7300225307699293e-05, 5.7571207435103133e-05, 5.8418558182893321e-05, 5.8552614063955843e-05, 5.8388985053170472e-05, 5.7633598771644756e-05, 5.5951910326257348e-05, 5.7049375755013898e-05, 5.5755983339622617e-05, 5.8621339121600613e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data5[32*1*1*96] = { 
  /* [0][0][][] */ 13,3,116,46,110,29,-25,-35,85,-33,-40,39,80,46,12,79,-1,16,-9,-1,-12,-37,42,119,-45,46,96,4,119,38,24,-21,101,-6,-29,87,-42,-19,-28,60,15,-24,-32,113,77,-40,119,25,51,-3,15,109,-15,3,-31,117,58,89,127,-41,-17,100,2,74,33,50,91,108,78,111,102,-46,113,-34,70,102,-39,49,-5,63,78,54,107,35,-4,9,-24,115,60,125,32,-44,49,89,60,54, 
  /* [1][0][][] */ -2,65,-12,38,11,100,68,46,100,-35,-37,118,88,21,58,89,120,10,66,127,5,36,67,60,66,53,9,119,47,43,113,-8,85,117,33,61,79,85,30,-8,-6,45,23,-31,15,67,18,0,23,-24,124,83,48,102,-18,3,61,113,85,101,-3,125,-9,-19,-3,66,96,71,117,60,53,47,-44,108,4,75,101,6,10,95,-19,103,1,-46,61,126,-11,-9,98,100,109,59,102,107,60,37, 
  /* [2][0][][] */ 74,68,-5,109,24,-4,106,110,-33,104,14,126,107,29,101,-42,-3,21,66,80,-32,29,123,56,22,99,117,47,-12,99,99,110,-10,25,-29,-39,-24,110,118,20,-46,-16,50,36,-22,127,21,-17,114,68,107,-26,5,87,56,53,-11,110,-6,43,27,84,14,92,108,74,76,105,-31,89,47,-14,65,-15,64,61,0,22,44,48,68,-30,32,9,41,-32,26,16,106,124,22,45,7,-22,5,-10, 
  /* [3][0][][] */ 16,-39,-10,-55,-91,-1,-122,-9,-1,-23,10,-36,30,33,16,-34,39,34,-80,-28,47,-104,-87,-124,-56,-122,-99,40,-5,-112,26,-33,-80,-65,-51,-50,-107,-57,-8,-3,23,-107,-110,-38,16,-17,-74,-101,87,-100,-7,-38,32,-17,28,-112,-126,-125,-126,-83,-110,-12,-66,16,3,-64,-84,-62,-63,-91,-36,36,-23,-39,2,-75,-15,111,33,-85,-105,-127,-11,110,-17,-5,-71,-46,-100,-6,-39,-119,31,-109,-106,-9, 
  /* [4][0][][] */ -1,36,-40,0,-59,-57,-16,-28,6,27,-45,-1,-19,-66,-48,-88,-58,-43,-86,-29,40,-107,24,-20,-53,-42,8,-83,-75,-13,-88,-78,11,45,-28,-115,-76,-44,-123,-4,1,-85,-94,-106,-14,39,-13,2,-22,-71,-52,-95,-105,-6,-103,-24,-13,-109,-20,-29,-34,-94,-68,-89,-74,2,-38,-66,-19,-114,-111,-101,-80,-25,35,0,6,-56,-45,-82,-35,-72,-112,22,-39,12,27,-38,-127,-95,-6,-6,-18,34,-112,-52, 
  /* [5][0][][] */ 112,-27,98,101,70,-45,60,81,118,-46,38,-11,56,113,66,67,85,85,-14,112,63,78,53,20,-37,-7,27,-28,75,62,51,-34,12,41,-12,53,-45,13,74,56,-26,1,70,112,15,57,65,1,-40,117,58,-17,69,52,65,23,119,76,0,10,63,-10,67,-14,16,114,20,61,94,40,116,-12,4,97,19,-13,47,4,49,102,119,71,60,119,-21,100,36,68,90,-34,127,106,26,58,93,-21, 
  /* [6][0][][] */ -25,-70,45,18,-101,-85,-40,10,-48,-99,-33,-103,26,3,47,-126,-7,-36,-38,38,-96,-126,43,5,-83,-98,-44,-81,-58,-122,-3,-95,-105,-127,-72,-116,-45,-9,-119,22,26,4,-21,-50,-121,40,-103,-72,-59,-25,-58,-86,6,-78,32,-58,-32,-44,-88,45,-109,-37,12,-91,-76,11,36,-74,20,-42,-116,-41,3,-89,-105,-69,-98,-112,-80,-60,-13,-58,-6,-58,-91,-102,-68,-108,24,32,33,-26,-77,-87,18,-59, 
  /* [7][0][][] */ 127,91,13,9,-12,125,26,40,127,44,-31,52,81,-25,75,95,79,53,39,124,80,66,36,104,-11,116,70,82,-17,119,26,67,59,59,89,115,-38,104,33,20,110,-16,103,91,78,38,116,-42,79,-2,-41,-12,22,104,53,63,126,-26,43,-2,45,36,99,-43,-11,-1,90,58,-40,56,89,103,103,59,84,84,-7,81,-33,75,108,14,26,-14,105,65,-41,109,100,44,105,88,-1,9,38,-8, 
  /* [8][0][][] */ -31,-16,-73,-106,3,-21,-95,-56,-35,-13,-8,30,-38,-73,-102,-93,-91,29,-87,-27,-18,-58,20,41,-126,28,-7,15,-90,-26,-106,46,28,-64,-5,-42,45,-38,-54,12,19,35,-121,-127,-48,-61,-57,40,-25,-108,-87,-41,-87,-46,-63,-119,-5,39,-110,36,42,-9,-9,40,-64,-74,-56,33,-103,-2,-16,-41,16,10,-34,-24,-75,38,21,14,-14,20,-122,-103,-21,-10,14,-71,-13,-68,-102,34,-99,-114,-74,6, 
  /* [9][0][][] */ -38,-35,45,-6,21,-119,-76,-127,-9,-3,-47,0,-60,-98,-115,-59,45,-40,-113,-91,-37,34,-120,-117,43,-46,-49,-20,-48,-85,-105,34,5,-40,-20,-54,-96,-28,-66,-72,-5,-90,0,-109,20,-25,-117,0,50,-49,-100,-1,15,-95,-92,36,24,-83,-51,-43,-105,38,22,-95,-104,-36,38,-5,-69,35,41,-107,-35,20,-118,-110,-98,-127,-69,38,-15,-20,35,-19,-72,-109,-13,-50,34,-16,-62,40,42,-40,5,-66, 
  /* [10][0][][] */ -6,101,108,-9,28,117,119,60,69,62,57,-11,113,100,15,49,14,99,-33,-6,26,61,82,-11,64,79,-47,-43,4,98,-29,-20,103,114,127,94,10,45,15,65,14,125,-42,12,-31,-3,37,-4,39,40,67,47,85,56,-7,14,-34,28,62,6,37,98,121,71,126,-16,-32,24,56,24,-29,-10,103,88,-21,120,28,87,89,57,97,40,81,116,-34,90,114,21,66,46,37,-11,1,3,6,-9, 
  /* [11][0][][] */ 122,49,30,117,127,74,80,62,123,108,-17,123,35,-22,61,-8,-2,-35,87,70,63,96,58,-41,-38,-30,25,92,98,34,59,25,-25,-13,79,74,-6,96,19,-4,21,117,-15,44,10,-4,-27,-26,26,117,122,75,-29,-27,53,59,-10,-1,-61,-25,-19,105,102,47,61,104,-2,62,105,83,-22,-13,70,117,-34,78,-9,-15,7,106,-38,22,-13,-73,74,-19,51,-57,-30,35,48,-35,-23,16,-12,12, 
  /* [12][0][][] */ 50,91,0,41,105,46,14,66,-16,84,30,51,7,50,76,-18,-33,16,5,-19,60,33,53,112,-9,4,114,-33,108,50,14,126,-23,-11,6,52,38,-15,27,72,125,70,-42,11,25,-21,11,127,8,-45,-17,117,67,41,-20,103,26,-3,80,90,83,124,37,80,122,65,7,127,82,115,71,93,102,125,28,37,14,66,-45,-28,-2,117,74,51,14,64,80,125,-29,-40,109,72,115,29,61,96, 
  /* [13][0][][] */ 121,-3,116,111,109,124,99,87,94,-36,49,20,107,93,89,5,-46,-11,-12,61,90,20,127,6,-7,70,44,54,-24,-26,101,68,70,117,25,68,-21,19,58,91,-6,97,1,49,9,61,39,18,66,114,14,-38,-32,62,114,-19,6,61,25,-14,20,126,-16,51,1,-6,-28,104,13,31,111,39,-27,68,-16,10,-37,89,100,-5,79,-30,110,55,-20,-34,109,127,32,2,-14,80,124,1,89,36, 
  /* [14][0][][] */ -2,-31,106,92,98,19,29,-43,-17,13,92,101,18,-20,-26,-23,2,-3,50,59,8,65,40,86,-43,-13,16,64,-44,-46,-17,69,118,24,16,45,111,127,66,-42,37,-42,66,107,90,-43,89,-22,75,70,97,79,112,29,29,50,4,47,77,112,28,-20,20,94,-27,32,98,-39,-26,-27,-25,110,43,102,77,-13,82,-39,81,67,74,25,-46,12,-45,-26,-42,119,121,47,106,1,103,116,28,87, 
  /* [15][0][][] */ -26,-58,-59,16,30,-102,6,-110,6,-40,-90,-30,40,-37,-104,-120,27,-31,-107,-20,-3,-24,15,42,21,12,-9,30,-23,3,10,-112,-35,-33,-85,-41,-87,44,42,-88,-26,44,-74,-56,-20,-96,-70,-97,-43,-97,-41,-15,-111,-113,-75,-44,11,0,-73,43,-71,-86,-38,38,-64,33,-91,-36,-82,-34,8,-92,-25,-48,4,-117,-40,3,39,19,-98,5,-117,-84,-127,-65,-106,-11,24,13,-120,-68,2,43,-117,45, 
  /* [16][0][][] */ -95,-42,38,-89,-9,46,-84,-10,-4,-4,-126,14,-52,-79,-82,-89,43,20,14,10,45,20,-72,-1,-68,1,-94,8,-120,-30,-10,-32,-124,19,3,4,-69,0,-80,-95,-24,-78,15,29,7,38,38,-52,-86,-127,-37,45,-73,49,11,-6,-21,29,12,-31,49,43,-15,7,2,-31,-70,31,-7,36,-66,-49,-18,30,7,26,-50,36,-127,-52,-31,-106,4,-32,-33,36,38,-34,19,-32,-52,46,13,-66,-106,-21, 
  /* [17][0][][] */ -14,-120,-17,21,-72,-122,-88,-112,-6,-105,24,-2,34,6,-125,-3,-14,1,38,45,-109,-49,-29,-78,-21,11,-97,-19,39,-79,-63,18,-62,-57,-15,-35,-75,35,-105,-61,-110,-69,-51,-46,-34,-30,24,-121,28,39,-50,-18,-53,19,34,-95,-127,25,-102,-122,-15,-109,16,34,-103,-94,-8,-116,-121,-42,42,-18,-28,-127,-89,10,47,-74,-8,-84,-31,-51,-97,-108,-123,15,20,-63,-24,18,-112,-127,-48,36,-30,-28, 
  /* [18][0][][] */ -109,34,39,-90,-46,-121,-115,37,-44,92,-118,4,-67,-15,5,-83,-24,-57,67,-57,35,-73,-24,-98,-19,-110,-52,42,-18,-14,-39,-8,-6,-60,-118,-118,-63,59,13,7,8,-40,-76,-46,-123,-28,52,-42,28,21,12,-16,-120,-46,-38,24,-71,-14,18,-126,22,41,-30,-13,-90,-127,17,25,11,-97,-93,40,-111,-15,-104,-116,0,70,-41,-95,-81,-45,6,-12,35,-64,12,87,-119,-95,-86,38,25,-80,-4,16, 
  /* [19][0][][] */ -24,-16,18,-9,5,-101,34,30,32,-85,-17,-46,-109,-13,-80,7,17,-116,43,5,-54,22,-79,-28,19,-97,-16,-89,-106,-126,-86,-4,22,-100,-14,-39,-32,-90,-80,-113,-5,-125,-100,-31,-102,-16,19,-108,-58,-10,-68,77,-64,-27,-33,-45,-20,35,-40,-58,3,-79,37,8,-91,-40,-58,-39,-44,2,18,-76,-85,-127,-80,-98,-55,-122,-27,41,5,-123,-60,20,-103,-43,-32,-41,29,-16,-41,10,-62,47,14,-74, 
  /* [20][0][][] */ -46,13,13,32,-103,30,-25,4,-28,-29,-103,-36,-44,26,-9,-93,-77,-66,-88,-62,-22,-72,-96,-92,18,-93,-116,-4,-22,-29,-68,45,36,-6,-50,3,-8,-63,-51,-119,-101,-65,-105,-115,-59,-86,-90,40,8,-127,-115,-9,-3,44,0,-39,30,16,34,27,44,-79,-89,-64,-59,-88,-77,-28,-101,-95,-89,20,-86,-101,-16,-25,43,19,43,41,25,-35,24,-57,6,47,-50,16,-24,33,-18,10,-22,-20,-42,-35, 
  /* [21][0][][] */ 108,95,92,-36,111,-17,93,51,37,-9,-14,70,42,67,2,-27,-37,17,59,29,118,4,92,-22,81,-24,15,93,50,42,34,23,44,54,-28,-44,120,110,-46,15,34,44,60,29,-33,-22,-20,107,22,-11,34,102,65,90,-31,58,1,77,2,127,79,-16,48,30,98,62,13,-12,-38,37,83,95,63,24,92,89,-43,18,85,117,49,112,64,-14,58,-31,86,-23,-38,96,119,-44,6,-10,88,17, 
  /* [22][0][][] */ 66,1,-13,-31,108,0,123,84,-30,107,-15,-39,127,-43,-45,-23,70,105,-102,-4,108,-14,65,65,111,38,-45,117,-3,-17,-8,-41,78,88,55,51,44,30,-3,-45,-35,31,43,113,83,-47,110,24,-7,-20,45,26,-7,-28,5,67,31,19,24,18,123,-16,-17,-45,-9,56,-44,7,125,120,23,39,-9,47,90,-27,75,-69,90,113,121,-33,-16,-104,101,105,115,-45,-1,66,-8,87,56,56,19,116, 
  /* [23][0][][] */ 87,-26,44,82,112,-46,43,-36,82,-21,103,95,53,-40,54,10,106,15,-40,114,108,-21,117,14,28,29,101,56,92,75,93,11,11,72,54,65,112,34,-44,44,-39,40,46,-42,-12,-28,124,60,97,-43,-27,1,100,-5,0,106,-23,24,114,73,-44,-29,0,31,64,67,-47,-42,86,28,123,-14,35,14,11,-31,73,23,110,127,0,1,55,-39,110,45,124,23,-28,71,119,34,118,0,15,103, 
  /* [24][0][][] */ -17,4,-36,-11,-23,-42,-10,-27,90,127,101,-4,125,86,11,-46,-20,72,60,1,111,-19,0,13,79,19,95,83,119,81,44,-6,39,47,77,62,1,-23,86,25,-14,-33,117,44,56,13,72,94,-98,6,24,51,93,84,92,-14,38,98,60,41,107,37,67,111,-32,112,6,-26,-35,80,-2,21,12,70,111,115,86,-15,-37,-20,-18,-29,-6,-45,42,88,31,-112,60,-39,45,-18,27,62,-29,64, 
  /* [25][0][][] */ -24,-2,-18,32,108,-14,-36,79,73,-43,11,56,92,39,-41,23,-14,84,-15,-41,89,102,31,-3,50,1,-37,68,95,-27,68,124,108,-41,72,93,112,-5,23,26,-22,111,-38,42,112,70,88,66,-38,107,-13,42,72,25,-7,47,24,78,-39,95,127,71,78,73,40,95,27,34,-27,35,21,-44,65,-44,92,56,92,93,51,55,76,76,4,100,-16,5,-36,-27,23,11,116,56,-46,29,25,-21, 
  /* [26][0][][] */ 2,-124,-54,-48,-110,-41,-46,-48,-117,-127,40,25,-96,-73,-30,-49,46,-16,-97,-87,-28,15,35,-28,0,9,-28,-4,-28,-34,-106,-39,-60,-83,-110,-113,-86,25,-75,43,-110,37,4,-14,-91,16,-68,37,-54,-16,-41,36,-30,-73,-40,-115,33,9,2,-19,-36,-107,9,-53,46,-52,-79,4,-102,20,26,33,21,-109,-102,-32,-4,-117,-109,-31,-59,17,23,-93,21,-38,-71,-27,-98,46,-31,-25,-79,47,0,27, 
  /* [27][0][][] */ -31,-33,-86,-115,-127,-91,-91,-51,-8,35,-12,-115,-60,3,22,-61,10,-51,7,-100,-108,-31,-60,-56,-116,-5,-119,-41,9,-18,-63,-46,6,12,-106,-103,-105,-87,-122,27,-109,-26,-18,-26,34,-21,12,38,80,11,5,-88,-106,-102,-44,-64,37,-57,-60,-97,-82,-84,-64,1,-10,-74,-122,39,-3,-31,-126,-33,6,-70,-45,-104,-4,-22,26,37,24,-59,47,-21,-94,-100,-63,39,-75,-42,-65,-77,3,-26,26,3, 
  /* [28][0][][] */ 27,-41,27,-5,-127,-87,-115,-93,-45,-122,5,17,-103,-107,-37,36,31,45,-91,20,-48,-22,-123,-94,-105,22,-105,-85,-97,-97,-42,-55,-117,-28,20,17,-4,-120,-71,-14,40,-7,-106,-1,-112,-46,-30,-3,-10,-88,-86,-35,-106,-22,1,-11,5,-50,23,0,-36,-73,-112,-37,5,16,-56,21,-101,-13,-120,-71,13,4,-45,-115,-127,-53,-97,-4,-96,-110,48,-36,6,-122,9,-80,-118,-55,-68,-91,-68,6,-91,-86, 
  /* [29][0][][] */ 0,1,3,-78,-104,-29,-127,-34,35,-50,-106,-109,41,-117,-75,-74,-113,38,-18,-87,-95,-64,2,-35,-65,-33,-72,-60,-115,-44,39,-41,-1,-38,-99,-80,-47,38,-46,32,-3,41,-73,23,-39,40,-79,-58,-26,-43,5,-109,15,-114,45,-4,-109,3,-76,42,-126,33,-109,-77,-84,-86,0,28,33,-103,-14,-92,44,18,6,-20,47,-86,-62,-15,-43,-101,-45,-97,9,48,-6,20,-67,34,14,22,-116,-26,-40,6, 
  /* [30][0][][] */ 62,-50,-7,69,-54,50,-26,-10,123,27,0,4,-37,55,86,9,35,28,110,-38,71,-36,-54,46,-66,59,-17,109,29,-83,-42,42,-24,-14,-50,-1,27,28,17,36,69,-35,30,101,121,-16,119,82,-54,98,27,-80,85,-35,32,121,-38,-8,-63,-42,-64,30,-27,10,-52,-42,-35,107,-6,127,77,7,-31,120,52,-32,-31,-40,-37,-7,63,61,-52,-16,-45,43,-48,92,-13,-66,101,76,13,34,32,-13, 
  /* [31][0][][] */ 22,-106,-11,36,-1,9,-81,-111,-60,-52,-96,-102,36,-127,-72,44,-82,-103,-10,-1,9,-11,-60,41,-5,-121,-10,-8,-90,-91,-3,42,-24,-22,-105,-43,34,-60,-87,-119,7,-88,-60,-14,-34,-77,-66,-19,82,-19,32,16,-122,-80,-97,-20,-124,13,-35,46,-66,-39,26,-93,14,45,-70,-95,17,-126,-125,-30,-109,-68,-35,-33,-81,-72,-1,29,-93,-68,4,95,4,34,-107,-25,-24,-76,-101,-78,-28,39,-41,-56, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0024881477002054453, 0.0024798957165330648, 0.0024633228313177824, 0.0024712414015084505, 0.0024599856697022915, 0.0024628893006592989, 0.0024553013499826193, 0.0024756127968430519, 0.0024859809782356024, 0.0024768682196736336, 0.0024867798201739788, 0.0024717743508517742, 0.0024725401308387518, 0.0024874967057257891, 0.0024783306289464235, 0.0024831490591168404, 0.0023342075292021036, 0.0024678136687725782, 0.0024748716969043016, 0.0024277055636048317, 0.002434619003906846, 0.002485260833054781, 0.0024352595210075378, 0.0024467762559652328, 0.0024827886372804642, 0.0024884860031306744, 0.0024815318174660206, 0.0024494279641658068, 0.0023779561743140221, 0.0024245984386652708, 0.0023696292191743851, 0.0024914068635553122, } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&g0::quant4_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data6[96] = { 842, -238, 1375, 2260, 2290, -1246, 2303, -1097, -1987, -582, 3009, -843, 2120, 3181, 986, 641, -419, -482, -1127, 2483, 836, -607, 1404, -10, -944, 1414, 729, 983, 2482, 1124, 2124, 342, 395, 2162, 1976, 1621, -452, 1541, 1243, -2324, -423, 449, 201, 559, -820, -67, -525, 153, -4791, 891, 734, -1393, 3599, -166, 654, 715, 244, 1355, -140, -1518, -152, 814, 426, 1917, 2376, 1834, 1004, 1879, 1724, -100, 1427, 2283, 1400, -436, 2159, 2838, 55, -2113, 18, 838, 4380, 895, -479, -894, 295, 42, 439, -1974, 1308, -677, 2271, 491, 261, -1872, 109, 438, };
const TfArray<1, int> tensor_dimension6 = { 1, { 96 } };
const TfArray<96, float> quant6_scale = { 96, { 0.00034466327633708715, 0.00047086260747164488, 0.00034336224780417979, 0.00037887386861257255, 0.00031623110407963395, 0.00039856191142462194, 0.00029889872530475259, 0.00031307179597206414, 0.00025328973424620926, 0.00040876530692912638, 0.00024723887327127159, 0.00041240509017370641, 0.00030832181801088154, 0.00021860896958969533, 0.0004095567564945668, 0.00048240661271847785, 0.00058842182625085115, 0.00039154206751845777, 0.000343188556144014, 0.00028812399250455201, 0.0003894554974976927, 0.00033760405494831502, 0.00032406667014583945, 0.00052659143693745136, 0.00034940466866828501, 0.00036264350637793541, 0.00052351423073559999, 0.00025199394440278411, 0.00032714259577915072, 0.00046116538578644395, 0.00029172995709814131, 0.00042067360482178628, 0.00049498985754325986, 0.00024387198209296912, 0.00027508684433996677, 0.00036216143053025007, 0.00040339084807783365, 0.00023402084480039775, 0.00039717624895274639, 0.00026486068964004517, 0.00037973164580762386, 0.00026438961504027247, 0.00048016582150012255, 0.00030886707827448845, 0.00040053453994914889, 0.00038521710666827857, 0.00029276148416101933, 0.00027377123478800058, 0.00016745427274145186, 0.00039938808185979724, 0.00047307848581112921, 0.00028071299311704934, 0.00023361315834335983, 0.00042481560376472771, 0.00037315324880182743, 0.0004770502564497292, 0.00034562603104859591, 0.00021925559849478304, 0.00040902890032157302, 0.00026419453206472099, 0.00030596787109971046, 0.00044134026393294334, 0.0004256890679243952, 0.00039351923624053597, 0.00032679311698302627, 0.00030892679933458567, 0.00031061065965332091, 0.00033009864273481071, 0.00044311073725111783, 0.00045971831423230469, 0.00040285353315994143, 0.00026064773555845022, 0.00026600755518302321, 0.00033134612021967769, 0.00028492155252024531, 0.00024564814520999789, 0.00030986254569143057, 0.00033468494075350463, 0.0003091013350058347, 0.00035820723860524595, 0.00017261602624785155, 0.00042947151814587414, 0.00038851698627695441, 0.00037238653749227524, 0.00037370112841017544, 0.00031604131800122559, 0.00039237865712493658, 0.00024973577819764614, 0.00040949371759779751, 0.00027320493245497346, 0.00030634371796622872, 0.00025883797206915915, 0.00039529328932985663, 0.00028125973767600954, 0.00050130975432693958, 0.00034641948877833784, } };
const TfArray<96, int> quant6_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data7[96*1*1*16] = { 
  /* [0][0][][] */ -32,56,-43,6,17,-2,57,80,-25,25,4,-98,91,127,-74,-7, 
  /* [1][0][][] */ 3,20,-30,-41,-29,17,40,-127,5,-60,-38,-65,-28,-55,-26,-15, 
  /* [2][0][][] */ -2,-5,46,84,2,55,-110,127,-38,20,84,-68,-34,-75,-20,41, 
  /* [3][0][][] */ 53,-98,42,-27,19,-48,-5,127,-46,70,35,22,17,27,-11,29, 
  /* [4][0][][] */ -64,-47,-39,72,-47,43,3,-77,30,22,-1,16,62,15,69,127, 
  /* [5][0][][] */ 127,40,-41,-1,-90,-1,44,42,-8,10,75,60,85,43,-56,-15, 
  /* [6][0][][] */ -16,-71,-97,-91,-42,-27,33,-15,-20,-21,-65,63,127,21,100,25, 
  /* [7][0][][] */ -36,58,-55,-105,-21,-87,-56,-9,-127,33,-98,-93,-113,-15,41,70, 
  /* [8][0][][] */ 82,29,64,31,43,48,62,-10,99,-54,26,-15,-127,-51,-112,-7, 
  /* [9][0][][] */ -18,69,11,-54,-40,-27,11,-27,-13,29,-21,27,24,127,36,10, 
  /* [10][0][][] */ 41,19,-72,80,-58,14,18,-17,-40,-63,-84,-127,-86,-40,-20,119, 
  /* [11][0][][] */ 23,-15,75,-11,10,-45,28,114,-57,41,-47,-18,9,-23,38,127, 
  /* [12][0][][] */ -75,-48,35,30,51,-27,86,70,-28,52,-25,-43,23,49,-70,127, 
  /* [13][0][][] */ -24,-12,-17,0,127,-11,119,37,-71,35,-104,-89,66,29,-125,19, 
  /* [14][0][][] */ -127,73,32,-40,26,-23,82,-27,-6,55,70,-35,-50,-7,-65,68, 
  /* [15][0][][] */ 5,-33,-127,-22,86,-55,-92,-14,-38,-1,3,-40,-23,-88,-32,59, 
  /* [16][0][][] */ 113,6,-13,10,45,-6,17,-38,-12,29,127,23,19,-18,-53,37, 
  /* [17][0][][] */ 32,35,0,-104,-31,-30,76,-127,-21,4,-60,6,11,83,26,20, 
  /* [18][0][][] */ 45,127,10,-21,30,-44,-41,-27,-57,91,-42,19,-5,69,8,-45, 
  /* [19][0][][] */ -84,-125,69,-104,66,-127,-6,-1,10,63,41,53,52,-38,28,2, 
  /* [20][0][][] */ 7,57,69,24,-11,-18,-3,-43,32,14,61,-43,-127,-1,-42,-28, 
  /* [21][0][][] */ -33,54,-3,-7,32,51,78,21,-127,25,-12,-6,1,38,-29,-44, 
  /* [22][0][][] */ -10,-105,66,37,43,-86,127,31,-9,-23,-14,-94,65,-50,-74,-23, 
  /* [23][0][][] */ -68,-63,57,35,44,4,0,-18,-4,-11,49,22,28,80,83,127, 
  /* [24][0][][] */ 18,18,49,113,74,40,-80,-127,54,-3,-69,40,-19,22,-7,-51, 
  /* [25][0][][] */ 10,46,36,-23,-43,15,29,-9,-43,26,-16,11,14,127,-1,-12, 
  /* [26][0][][] */ -75,52,22,34,45,-59,-19,-12,32,2,-6,47,25,18,-89,127, 
  /* [27][0][][] */ 1,-119,-77,30,-92,127,-22,-91,-4,-66,89,-56,10,-30,-93,-44, 
  /* [28][0][][] */ -65,-21,22,73,58,-11,-23,-127,-117,84,98,-41,112,-11,-76,-7, 
  /* [29][0][][] */ -127,73,1,-7,-2,1,-86,-43,-16,-9,-23,18,28,-31,-115,72, 
  /* [30][0][][] */ 24,41,-20,88,-66,-100,-39,10,-9,19,-20,-118,127,6,-27,98, 
  /* [31][0][][] */ 127,47,-30,-5,-32,-7,60,8,-72,9,32,19,10,-5,2,-16, 
  /* [32][0][][] */ -4,6,127,-22,-41,38,39,-8,-38,12,15,40,-16,79,74,12, 
  /* [33][0][][] */ 28,49,-23,-71,-49,-6,68,50,-32,18,-6,-81,50,127,-12,14, 
  /* [34][0][][] */ -51,7,52,-11,-4,-18,110,-33,-127,4,56,-61,14,73,-68,-52, 
  /* [35][0][][] */ -27,-10,-68,38,-35,127,-3,12,11,123,-24,99,-29,85,-7,53, 
  /* [36][0][][] */ 8,-47,127,-26,-64,-3,-54,-26,30,1,-25,53,-16,-90,-16,23, 
  /* [37][0][][] */ 104,21,93,1,74,-39,-72,58,-27,84,-32,29,-111,-11,127,-47, 
  /* [38][0][][] */ 78,75,-19,-127,-42,-82,-60,19,-111,18,-126,-83,-97,-76,-62,90, 
  /* [39][0][][] */ -48,36,-32,-9,-89,-50,81,30,-127,-50,37,52,11,17,15,27, 
  /* [40][0][][] */ 127,55,-21,-48,-33,45,-14,-57,-5,7,-10,-38,38,68,5,3, 
  /* [41][0][][] */ 127,-55,-36,-22,-35,25,-34,7,92,-54,33,-89,108,-48,88,-63, 
  /* [42][0][][] */ -32,-53,-56,127,-17,-60,-70,34,26,-12,26,24,-86,82,-70,-22, 
  /* [43][0][][] */ -59,-21,-61,-125,-70,21,19,85,56,-127,-11,51,-36,-65,-7,63, 
  /* [44][0][][] */ -6,6,4,-68,7,-50,0,73,127,-98,96,120,75,13,7,-25, 
  /* [45][0][][] */ 50,87,-39,51,127,-97,-56,-78,113,-81,82,-28,-48,-18,-36,26, 
  /* [46][0][][] */ -60,-83,-20,22,93,-63,7,57,22,127,-69,-120,76,50,-95,127, 
  /* [47][0][][] */ 116,-26,-13,10,116,5,-23,-93,20,127,-8,17,-31,-98,-71,-9, 
  /* [48][0][][] */ 29,43,-32,-127,16,-23,79,-123,27,-19,-11,62,22,33,-17,13, 
  /* [49][0][][] */ -49,74,-26,2,9,-74,26,77,-53,49,3,-101,7,31,127,-106, 
  /* [50][0][][] */ -3,50,-5,-12,-127,-14,-74,-37,34,76,13,13,-46,-21,-13,17, 
  /* [51][0][][] */ 127,-70,-81,-39,-75,77,-87,-73,31,-45,-24,101,-12,-101,-21,22, 
  /* [52][0][][] */ -63,-96,4,113,-6,-69,-92,-53,-8,-19,5,-115,59,-110,-30,127, 
  /* [53][0][][] */ 1,62,26,-127,-16,70,99,-38,-32,0,-28,-12,93,-118,26,69, 
  /* [54][0][][] */ 49,127,-16,5,-26,-57,-112,23,26,-42,-13,87,48,99,39,31, 
  /* [55][0][][] */ -59,-37,68,-2,15,-52,61,49,-41,20,-10,34,127,15,-30,24, 
  /* [56][0][][] */ 127,-1,-8,0,-60,73,-25,-83,-1,20,-49,25,-31,67,13,12, 
  /* [57][0][][] */ -23,-10,-97,-4,-127,-87,118,-64,-125,-72,109,34,60,85,32,28, 
  /* [58][0][][] */ 32,-86,48,2,31,-50,3,32,8,7,-127,-9,51,-18,-65,76, 
  /* [59][0][][] */ 91,36,-90,58,-16,8,54,-49,-89,-68,51,-67,-127,-30,49,76, 
  /* [60][0][][] */ 23,61,12,50,-45,-5,-2,-21,-67,-117,48,122,-80,-127,-17,-32, 
  /* [61][0][][] */ -54,-17,36,-51,-31,72,31,127,-42,-54,17,83,104,-31,-16,124, 
  /* [62][0][][] */ 116,76,-34,-127,-42,27,32,-68,16,15,-20,30,53,-1,-126,-65, 
  /* [63][0][][] */ -19,-3,-18,16,-34,-39,-68,-12,-39,-30,-49,2,127,-15,26,8, 
  /* [64][0][][] */ -5,-26,16,17,-57,-6,10,-39,21,127,0,-29,60,-72,-60,116, 
  /* [65][0][][] */ -45,-14,4,8,-47,46,42,-2,67,-79,62,-37,85,36,-127,73, 
  /* [66][0][][] */ -68,108,-109,-102,-2,-61,-120,-86,-115,58,107,35,-127,-79,66,14, 
  /* [67][0][][] */ 21,-14,-106,-127,46,93,28,-8,-46,-24,67,0,9,57,36,29, 
  /* [68][0][][] */ 24,-4,12,-64,-33,11,-9,57,-31,84,87,11,14,-61,-127,21, 
  /* [69][0][][] */ 38,-108,23,-59,40,-112,-2,127,-22,31,44,88,6,37,-44,19, 
  /* [70][0][][] */ 9,-24,62,61,48,14,127,41,55,-13,-22,0,-26,20,-88,57, 
  /* [71][0][][] */ 33,59,89,-63,-127,-117,-6,-14,-52,10,2,-97,-113,26,36,14, 
  /* [72][0][][] */ -31,-62,42,-127,87,11,31,61,-81,34,-84,7,73,124,-74,81, 
  /* [73][0][][] */ -3,39,66,-26,86,-101,-65,29,-52,106,-98,6,-50,-24,127,6, 
  /* [74][0][][] */ -57,-26,-127,-83,79,-63,-58,-8,-95,-23,-124,-1,-55,-74,-5,38, 
  /* [75][0][][] */ 127,-2,28,-73,-3,32,-114,-53,-31,-81,101,29,-22,11,18,-35, 
  /* [76][0][][] */ 32,-73,1,116,-1,39,48,-77,94,-127,84,120,-1,-98,-23,2, 
  /* [77][0][][] */ -14,-52,127,-40,48,-5,-3,-77,-7,36,52,97,18,62,35,-17, 
  /* [78][0][][] */ -19,-26,42,-65,26,-83,5,19,-7,13,46,-60,-127,-96,-97,-77, 
  /* [79][0][][] */ -127,-103,-53,58,84,67,-51,55,56,-7,20,11,-75,-101,-95,18, 
  /* [80][0][][] */ 31,-62,8,127,-58,7,-53,33,21,-11,89,33,-92,-36,12,27, 
  /* [81][0][][] */ 66,78,-40,94,25,56,45,127,-9,-17,116,72,117,51,23,9, 
  /* [82][0][][] */ -65,-18,32,-6,47,-127,-80,-91,-16,47,-18,-49,-44,106,-81,-2, 
  /* [83][0][][] */ 116,5,50,-49,-13,-32,-88,15,-1,-127,32,-68,-38,-32,34,1, 
  /* [84][0][][] */ 37,-30,-50,50,127,58,5,53,-117,43,-111,-45,12,-1,-31,-15, 
  /* [85][0][][] */ 41,103,65,-71,112,-30,7,-127,73,-62,64,20,47,-37,38,-29, 
  /* [86][0][][] */ 121,-13,127,24,-17,-30,48,16,-36,-29,-66,-22,14,35,-75,-10, 
  /* [87][0][][] */ 19,33,46,-115,108,-8,-27,41,16,-70,61,-66,-123,-127,21,2, 
  /* [88][0][][] */ -34,-11,17,-19,3,41,-39,-58,13,-7,-79,-127,-57,-51,-32,2, 
  /* [89][0][][] */ -60,40,52,-51,57,33,-121,-2,127,2,-53,-38,-43,-122,-23,-52, 
  /* [90][0][][] */ -41,-47,-66,-68,127,-4,-43,77,81,96,64,-45,68,-7,-110,4, 
  /* [91][0][][] */ -8,-32,-20,14,-95,-56,-52,127,-91,-109,77,-96,-47,114,67,109, 
  /* [92][0][][] */ -39,47,20,9,2,33,-62,61,-52,-27,36,-18,-46,127,24,39, 
  /* [93][0][][] */ 14,84,-64,-37,37,94,-89,27,33,33,84,68,-127,42,-14,44, 
  /* [94][0][][] */ 3,44,127,-12,-109,-64,36,-36,-2,-46,4,-44,-83,-48,-7,-1, 
  /* [95][0][][] */ 29,-11,3,33,127,17,-39,23,48,-19,-31,102,-37,38,108,-61, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant7_scale = { 96, { 0.0020411559380590916, 0.0027885304298251867, 0.0020334511063992977, 0.002243757015094161, 0.0018727757269516587, 0.0023603530135005713, 0.0017701303586363792, 0.0018540656892582774, 0.0015000259736552835, 0.0024207793176174164, 0.0014641915913671255, 0.0024423347786068916, 0.0018259355565533042, 0.0012946403585374355, 0.0024254664313048124, 0.0028568960260599852, 0.0034847366623580456, 0.0023187804035842419, 0.0020324224606156349, 0.0017063205596059561, 0.0023064233828336, 0.001999350031837821, 0.0019191792234778404, 0.0031185662373900414, 0.0020692353136837482, 0.0021476380061358213, 0.0031003423500806093, 0.0014923521084710956, 0.0019373954273760319, 0.0027311018202453852, 0.0017276755534112453, 0.0024913023225963116, 0.0029314160346984863, 0.0014442523242905736, 0.0016291121719405055, 0.0021447830367833376, 0.0023889509029686451, 0.0013859121827408671, 0.0023521468974649906, 0.0015685510588809848, 0.0022488369140774012, 0.0015657613985240459, 0.0028436256106942892, 0.0018291645683348179, 0.0023720352910459042, 0.002281322842463851, 0.0017337845638394356, 0.0016213209601119161, 0.0009916933486238122, 0.0023652457166463137, 0.0028016532305628061, 0.0016624312847852707, 0.0013834978453814983, 0.0025158319622278214, 0.0022098785266280174, 0.0028251747135072947, 0.0020468574948608875, 0.0012984698405489326, 0.0024223404470831156, 0.0015646059764549136, 0.0018119950545951724, 0.0026136939413845539, 0.0025210047606378794, 0.002330489456653595, 0.0019353257957845926, 0.0018295183544978499, 0.0018394904909655452, 0.0019549017306417227, 0.0026241790037602186, 0.0027225320227444172, 0.0023857688065618277, 0.0015436012763530016, 0.0015753430780023336, 0.00196228944696486, 0.0016873549902811646, 0.0014547710306942463, 0.0018350599566474557, 0.0019820625893771648, 0.0018305518897250295, 0.0021213656291365623, 0.001022262149490416, 0.0025434051640331745, 0.0023008652497082949, 0.0022053378634154797, 0.0022131232544779778, 0.0018716517370194197, 0.0023237348068505526, 0.0014789787819609046, 0.0024250932037830353, 0.0016179671511054039, 0.0018142209155485034, 0.0015328836161643267, 0.0023409957066178322, 0.0016656691441312432, 0.0029688435606658459, 0.0020515564829111099, } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data8[16] = { 11075, 17801, -3451, 2658, -320, 6081, -380, 3998, 17602, -4081, -10711, 8094, -12336, 10184, 4476, 5516, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 6.0017919167876244e-05, 6.3248655351344496e-05, 5.8347010053694248e-05, 6.6753018472809345e-05, 0.00010136692435480654, 7.4745970778167248e-05, 5.6854569265851751e-05, 4.7972629545256495e-05, 9.8592987342271954e-05, 8.8937464170157909e-05, 4.3654461478581652e-05, 5.5692089517833665e-05, 7.3998606239911169e-05, 6.5468666434753686e-05, 0.0001056622713804245, 7.4787749326787889e-05, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data9[16*1*1*96] = { 
  /* [0][0][][] */ -87,68,38,-1,-49,20,-101,26,-32,35,14,-3,64,16,14,-13,44,-28,123,41,37,-82,108,43,22,58,32,5,-41,-99,-127,-24,-22,-23,58,48,36,53,23,59,-37,-32,-61,33,-46,0,27,123,6,42,-22,-46,-37,31,56,-30,-85,31,-40,115,30,1,25,-21,-7,-85,-76,-1,-89,-97,-16,-49,36,25,-54,-79,-77,40,-67,35,-36,103,119,-50,-17,84,37,81,5,8,-35,1,-65,-14,-90,40, 
  /* [1][0][][] */ 72,50,1,-88,-45,1,17,43,9,58,92,-35,35,18,-107,-72,19,-31,-108,62,-45,-62,40,88,18,-50,26,-87,109,-98,98,-62,94,-3,-51,89,72,113,17,-20,5,-9,27,15,-20,101,-120,-27,-94,-33,-50,-61,16,-28,-73,85,41,-32,-67,-11,61,33,-40,-88,13,11,-40,-36,-26,11,-127,-42,-81,3,-11,-56,-20,-6,68,-53,-58,-63,-125,-66,10,-15,-57,52,-120,16,-35,81,-5,42,-93,33, 
  /* [2][0][][] */ 47,-53,39,-3,-6,-87,77,-20,-30,-31,-31,-32,-87,-47,30,-6,-101,-20,-9,61,-17,-22,-61,2,22,-80,-15,-1,-49,61,-24,127,-66,126,-2,-3,12,-35,-36,-31,-62,88,39,-7,-76,-16,-39,-33,9,-18,-5,-21,65,-39,-42,32,12,-22,61,-26,30,15,-48,-14,84,-12,-26,-30,47,66,-18,21,17,20,33,10,48,-83,41,66,50,-35,-57,44,-25,5,42,36,-9,-13,-40,4,-18,19,8,52, 
  /* [3][0][][] */ -18,-25,0,25,-9,-27,25,-69,-38,30,14,31,6,9,-27,17,-14,-12,43,28,-7,127,10,-20,-10,1,-36,22,74,-49,70,3,-36,46,-7,-41,0,24,11,-11,-45,-47,-51,4,-45,10,40,-21,3,-59,13,-3,59,-89,-10,-59,-8,55,-7,-19,12,9,-54,-16,40,21,-54,-20,-40,-19,28,-78,-45,-58,47,9,29,-24,-12,-8,-42,-25,-65,27,9,-51,46,-41,18,0,6,-34,58,4,-13,69, 
  /* [4][0][][] */ 7,-10,-53,32,41,37,-58,24,-44,86,60,5,-30,20,-15,-61,30,8,-44,21,35,-60,63,54,-82,20,-127,31,-18,-73,-12,33,-31,-23,-5,66,-8,11,-2,44,-49,-16,19,-1,-23,-10,-48,64,-14,66,29,-6,17,7,-49,33,21,-34,-11,12,60,16,43,-13,-20,-8,-50,25,-22,4,-58,25,15,-73,-12,-20,42,-31,-25,-13,-18,93,-47,-18,-43,39,9,-30,66,-16,7,-13,-69,-3,11,8, 
  /* [5][0][][] */ -42,8,16,-29,17,-38,27,-10,-31,50,16,-3,51,-41,-40,-56,15,-51,22,44,-124,-40,-84,17,-15,14,17,-12,13,-88,10,13,69,75,-34,9,-27,-6,60,5,-47,103,87,-2,22,78,14,19,-23,35,-42,2,-10,-55,2,-56,56,-23,-75,-32,73,60,-20,-38,42,-10,-42,-31,-72,5,-74,-29,6,32,-43,-58,41,-58,-6,-37,127,2,43,-97,-92,8,50,11,-63,9,42,18,-37,8,-14,99, 
  /* [6][0][][] */ 14,16,-47,50,-54,-119,110,101,-25,35,-38,37,-126,-43,73,25,-26,-23,21,28,20,-38,-80,-25,-73,12,91,-1,4,3,104,-21,-4,39,39,-88,-13,30,2,37,29,40,-73,-45,25,-27,-91,-8,57,-127,-44,38,7,34,-41,-84,36,15,35,-27,-116,20,-103,26,-1,-19,25,23,59,48,21,-17,-6,43,57,53,79,-43,62,-37,-30,-22,-87,81,-20,-78,67,-12,-9,28,5,10,4,-14,-52,123, 
  /* [7][0][][] */ 59,108,-66,-81,-50,13,10,-15,-31,60,-74,-29,-12,-11,36,15,-71,-20,-60,84,21,97,36,57,18,33,48,0,76,70,53,-53,42,5,7,35,29,-33,-24,58,-90,21,-15,-27,-9,-71,46,-1,15,-48,-109,-54,-72,34,-27,12,53,-10,-127,33,-31,86,-8,2,-47,25,-18,41,-64,10,-126,59,-12,94,-9,18,-29,80,-16,-99,7,-25,85,-101,16,4,-32,26,-33,100,-108,73,26,-7,-69,-14, 
  /* [8][0][][] */ 13,107,-70,67,-60,-8,-66,49,-80,-12,29,24,-21,63,10,65,28,-72,-18,-15,56,-26,-20,-37,-63,101,19,3,7,-44,-69,-11,1,-34,-53,-50,-68,48,29,28,-25,-19,8,33,-61,-59,30,9,-2,7,28,48,-25,1,-96,127,-16,7,-26,-17,-17,-15,43,31,-13,-43,-16,12,-66,-18,-20,-20,-43,-29,-101,6,-71,2,-88,-20,-12,25,-22,-58,-23,20,-2,54,33,89,-36,12,-114,-113,1,-30, 
  /* [9][0][][] */ -34,-3,-45,22,-9,-52,86,71,-30,22,-42,66,-46,-41,43,99,-10,32,89,38,-4,35,10,-63,-10,-24,2,12,-10,7,59,68,-47,21,21,-127,46,-37,-43,-38,8,-2,18,-44,-29,24,37,-5,12,57,45,13,-30,-93,19,-21,-20,-29,84,-38,-37,73,-77,-46,99,-31,-44,-16,-42,4,55,55,-29,60,-41,-1,-6,-3,-17,-30,27,-49,36,19,46,-35,10,-53,-71,-2,-20,-21,81,11,-20,-20, 
  /* [10][0][][] */ 49,-28,-19,-30,-8,-62,105,29,-16,-54,-45,-34,-127,-47,31,-33,-105,-6,54,53,69,66,-4,35,-76,59,16,22,-82,-51,-60,16,53,-9,79,-14,51,-121,62,107,46,-90,34,-21,6,-124,20,40,7,63,-100,-18,6,57,-11,31,-8,-93,111,26,17,23,-97,-49,21,-91,49,33,-6,2,16,74,100,11,56,-62,59,-78,87,18,-77,5,9,53,-12,-38,35,17,-72,-42,1,30,84,45,-6,39, 
  /* [11][0][][] */ -23,-8,12,-32,37,12,-50,-16,61,-15,-23,21,10,-24,-19,29,-77,-28,78,35,-72,44,-43,-50,35,38,-66,59,55,-24,9,-53,42,20,-10,1,-42,-16,-127,40,-88,36,-66,73,-8,32,21,-56,-7,-9,-31,-24,-8,48,92,-24,-1,-86,-14,-21,-47,-72,-46,-81,-18,-84,79,84,127,-8,42,8,-59,-36,30,-55,58,8,-3,66,49,16,3,103,93,29,16,8,-96,-81,-36,47,25,58,74,88, 
  /* [12][0][][] */ 12,-41,18,-54,9,72,13,50,19,28,-21,27,-5,19,33,-21,-74,62,34,63,127,-23,37,-38,8,-1,-80,-35,-38,88,23,-14,5,15,28,-49,60,-24,-6,-51,40,-38,58,23,-40,10,23,-29,-75,1,-20,41,0,-42,-11,-8,-52,29,29,21,1,-99,-11,-102,15,57,-33,-50,18,-14,73,31,-29,34,-29,62,-31,22,-43,12,-38,4,124,34,15,42,-2,-79,41,-13,-90,25,81,-14,5,-58, 
  /* [13][0][][] */ -31,5,11,-65,-54,-31,-20,-5,41,-53,-54,-89,28,-120,-13,-37,-40,-6,-46,13,-108,-3,-9,116,0,-20,124,32,-6,-6,75,17,-15,27,-82,84,0,-72,-1,-74,127,37,23,-3,-29,-106,77,-52,95,-34,-11,50,48,-29,-29,37,86,-71,-13,-33,20,66,-27,-49,23,57,-59,6,-35,-7,-46,27,-83,-7,-62,-102,-119,45,57,97,-37,27,59,-56,73,13,56,-38,-40,-39,-35,-7,-28,-9,6,22, 
  /* [14][0][][] */ 14,-1,-45,-44,89,98,-93,14,44,-19,45,-26,35,-42,-11,-38,-78,-6,46,127,27,-38,-22,25,23,14,-6,37,-12,15,-3,26,31,-24,-16,-15,4,70,79,-12,30,19,44,22,12,-16,28,-12,39,-27,-30,-1,16,32,-53,3,30,67,-58,-29,-35,-78,-16,-64,-13,-14,-22,14,-44,65,-35,45,20,-5,-41,-50,50,8,-25,-45,43,24,18,-33,9,59,-33,4,-50,37,36,36,-20,-14,-59,-78, 
  /* [15][0][][] */ -34,-10,9,-75,40,3,-6,-94,20,-9,21,39,-26,-42,2,53,-68,7,-7,-31,2,0,-32,-44,67,16,67,-66,-74,-61,-78,55,-6,75,50,-53,-29,-5,43,4,-42,23,51,9,24,-25,79,64,-13,17,-3,-57,-63,71,-9,-20,-54,-34,66,-11,-47,-11,-102,1,-30,-32,-16,0,68,-33,96,5,27,-7,-3,-15,-12,48,17,28,-35,88,71,51,-23,13,-127,-16,-27,-20,-46,0,63,-50,-43,77, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant9_scale = { 16, { 0.0025507614482194185, 0.0026880677323788404, 0.0024797478690743446, 0.0028370032086968422, 0.0043080942705273628, 0.0031767038162797689, 0.0024163192138075829, 0.0020388367120176554, 0.0041902018710970879, 0.0037798422854393721, 0.0018553145928308368, 0.00236691371537745, 0.0031449408270418644, 0.002782418392598629, 0.0044906465336680412, 0.0031784793827682734, } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data10[96] = { -387, -479, -2350, -2742, -1036, 2554, 221, -282, -681, -1399, 7402, -2675, 51, 6506, 6487, -5441, 11257, 1085, -4643, 399, -336, -1891, 490, -2040, 433, -2372, -8, -6221, -204, -5035, 347, -485, 8578, -476, -1564, 52, -676, -819, -1369, 5631, 143, 131, 407, -3544, 9206, 10428, -432, 12878, -1023, 8142, 7860, -3247, -850, 459, 255, 7936, -737, 217, 10942, 4326, 5185, 9400, 7522, -6529, -61, 1091, -2108, 2319, -2259, -2373, 1268, 1402, 8034, 364, -903, 8648, -1099, -425, 5544, -573, -518, 9869, -230, 1444, 13087, 659, -3505, -1623, 323, -3836, 11233, 343, 313, -719, -4014, -3949, };
const TfArray<96, float> quant10_scale = { 96, { 0.00030518011772073805, 0.00028156829648651183, 0.00015719096700195223, 0.00028053423739038408, 0.00024069368373602629, 0.00033319363137707114, 0.00042554023093543947, 0.00018410632037557662, 0.00028716717497445643, 0.00020905600104015321, 0.00015452844672836363, 0.00027155445422977209, 0.00039081540307961404, 0.00018913293024525046, 0.00016043049981817603, 0.00012734049232676625, 0.00015579242608509958, 0.00027432636125013232, 0.00018009141786023974, 0.00013399713498074561, 0.00024027697509154677, 0.00026741097099147737, 0.00024945545010268688, 0.0002175136178266257, 0.00068552530137822032, 0.00031897690496407449, 0.00038887359551154077, 9.5564180810470134e-05, 0.00032091911998577416, 8.9830791694112122e-05, 0.0004584353300742805, 0.00028381356969475746, 0.00022773206001147628, 0.00017588258197065443, 0.00023164994490798563, 0.00058157305466011167, 0.00015931122470647097, 0.00052060064626857638, 0.00023802148643881083, 0.00020383905211929232, 0.00028137830668129027, 0.00035862202639691532, 0.00033495455863885581, 0.0001289335050387308, 0.000135142428916879, 0.00013006999506615102, 0.00026537777739576995, 0.00011526972230058163, 0.00023399664496537298, 0.00012331880861893296, 0.00014040370297152549, 0.00015471740334760398, 0.0002134267269866541, 0.00018657610053196549, 0.00027182637131772935, 0.00016290492203552276, 0.00024891117936931551, 0.00030856256489641964, 0.00024586237850598991, 0.0001709275966277346, 0.00019788408826570958, 0.00019791584054473788, 0.00017493123596068472, 0.00016705066082067788, 0.0002353469462832436, 0.0001860289485193789, 0.00033285035169683397, 0.00025203378754667938, 0.00032030852162279189, 0.00016316761320922524, 0.00029699565493501723, 0.00024825567379593849, 0.00015303927648346871, 0.00028048909734934568, 0.00029868507408536971, 0.0001293541572522372, 0.00025504632503725588, 0.00022467385861091316, 0.000181916868314147, 0.00027009512996301055, 0.00026679423172026873, 0.00017258054867852479, 0.00029401169740594923, 0.00028275270597077906, 0.00011080115655204281, 0.0002524356241337955, 0.00017673922411631793, 0.00039776897756382823, 0.0003538328455761075, 0.00026387808611616492, 9.4576971605420113e-05, 0.00045329687418416142, 0.00031669950112700462, 0.00022816756973043084, 0.00017267302609980106, 0.00027729853172786534, } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data11[1*3*3*96] = { 
  /* [0][0][][] */ 45,60,-34,-23,-73,33,13,92,72,-86,-111,-10,-35,-41,59,-2,-112,39,-20,67,67,119,93,126,47,-36,-63,-45,-39,-25,35,18,-70,39,-68,32,40,-3,-25,-44,41,-5,20,-18,-127,13,-14,22,12,-108,-73,-31,60,22,-43,22,-32,-32,-10,-127,-127,37,-127,29,2,82,79,10,6,2,3,-38,18,31,18,-50,32,1,-96,45,-32,-102,27,3,-113,-63,18,-21,-127,42,-119,11,31,-40,80,31, -10,-61,-32,28,22,127,-1,-42,75,49,-45,127,1,-81,-98,90,-127,27,98,127,76,52,50,69,64,-18,-10,14,33,62,12,-127,19,123,33,-5,127,106,0,-127,127,-31,97,55,2,-127,127,-124,-39,-127,-18,-50,59,88,-47,-127,-26,1,-127,-24,-74,-74,-82,46,-3,76,43,1,-17,127,99,-35,-94,46,-57,-53,52,-101,28,127,-43,-87,105,-27,-26,-10,44,70,47,106,-127,-19,127,-65,127,13, -10,-113,-30,-30,-54,16,9,23,-4,79,-98,-35,16,-3,-31,-127,-65,-13,49,60,-1,98,78,127,51,-51,47,7,34,52,12,-10,1,-49,-69,79,43,30,48,-30,13,50,10,0,-73,-74,24,-55,51,-2,63,-21,49,25,35,27,10,-43,19,-21,-100,57,-105,-35,56,-14,8,16,-39,30,38,28,-52,-56,13,-39,-26,29,-12,25,-31,-15,5,18,46,-53,-32,-47,-107,-32,-61,7,39,73,-17,-40, 
  /* [0][1][][] */ 53,-38,16,49,38,-24,127,16,1,-127,-127,104,-25,-127,-73,80,-14,-64,127,66,-124,37,-71,-110,11,8,-127,109,-30,28,127,90,51,99,-16,127,-99,80,-51,-2,30,-127,-6,96,-62,-116,26,-63,-127,-122,-32,-16,58,-99,92,-46,-127,-24,-82,-33,-2,-92,-75,11,-53,3,127,-106,-12,-5,-11,-127,-46,29,100,-127,103,116,-106,-11,113,-127,-3,59,-84,14,-27,88,-39,-11,-107,2,17,-127,93,-45, -127,36,-68,127,-70,-106,-119,-127,80,-31,5,-3,-51,-57,6,66,-63,-127,114,102,-5,-127,-127,43,-127,127,-15,127,-30,-66,-67,94,-127,127,127,-61,-11,127,127,-25,-17,-2,-5,71,-85,-58,-83,-49,24,-42,-127,127,76,45,24,-89,-14,38,34,13,15,1,-89,127,15,-127,57,127,42,112,-127,-89,24,69,-127,-78,127,103,102,-12,-127,51,-127,78,-127,-53,127,127,71,127,-82,-127,-102,-96,37,127, 20,-40,44,82,40,2,25,76,-11,52,-106,33,-18,-42,-127,122,-27,-54,-15,38,-127,43,-35,-111,23,-18,76,35,127,52,33,-50,12,-99,-47,121,-91,-33,-67,10,8,57,-6,127,31,35,17,-127,81,-21,-112,-31,1,-127,-127,50,47,-25,-57,82,28,1,-36,68,127,-25,25,14,-21,-43,-67,-65,-127,-127,16,-88,26,13,-127,-9,-114,-31,-47,127,-23,35,28,24,-61,-39,-49,15,-41,123,-15,11, 
  /* [0][2][][] */ 49,-127,-3,-44,-19,49,45,29,-57,-66,-44,-90,-13,-39,-34,82,-53,41,-49,81,28,91,41,-74,-10,1,-30,-50,-47,53,24,51,14,19,-61,-38,93,30,-25,-60,18,36,-35,14,-60,25,11,-60,-41,-28,33,-7,35,-41,-3,-42,21,-25,-33,-10,-71,-38,-3,-34,2,85,4,3,42,-35,44,31,-53,-12,40,-39,0,-78,32,-29,-23,-60,-44,-49,-112,51,-52,17,-101,-3,-42,-1,13,31,37,10, -66,-23,127,-38,127,105,-5,50,-127,-22,-104,-99,127,-49,-1,76,-31,18,-48,-102,48,52,78,41,110,-69,-32,-6,-42,127,9,48,-32,65,-16,4,120,-5,-1,-34,-1,23,-127,-37,-54,46,-9,-105,-34,3,-88,38,127,-106,-54,-31,-40,127,-10,42,6,-127,38,27,6,57,-89,33,127,-53,40,45,-98,-10,2,-7,-39,-127,16,-59,-45,5,-58,-82,-114,127,-6,-30,40,-2,-6,1,-1,15,28,-31, -16,38,51,16,37,24,6,90,-22,17,-32,54,27,-32,-38,-6,-57,-19,-46,-7,18,81,-37,-74,41,-5,-15,-13,-23,59,3,-22,-3,13,-51,20,83,12,-28,-47,14,18,28,46,-71,-68,11,50,-13,66,-67,-22,-59,-54,32,34,29,-15,38,13,-68,48,-14,-41,52,43,-110,36,-6,-39,38,92,-25,-37,17,-39,18,-53,40,27,28,-85,-41,16,-96,46,-52,10,-99,-4,62,-4,8,40,26,-47, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.012970154173672199, 0.011966652236878872, 0.0066806161776185036, 0.011922704987227917, 0.010229481384158134, 0.014160729013383389, 0.018085459247231483, 0.0078245187178254128, 0.012204605154693127, 0.0088848797604441643, 0.006567459087818861, 0.011541063897311687, 0.016609653830528259, 0.0080381492152810097, 0.0068182959221303463, 0.0054119708947837353, 0.0066211782395839691, 0.011658869683742523, 0.0076538850553333759, 0.0056948782876133919, 0.010211771354079247, 0.011364966630935669, 0.01060185581445694, 0.0092443283647298813, 0.029134824872016907, 0.013556517660617828, 0.016527127474546432, 0.0040614777244627476, 0.013639062643051147, 0.0038178085815161467, 0.019483501091599464, 0.012062076479196548, 0.0096786124631762505, 0.0074750096537172794, 0.0098451226949691772, 0.024716854095458984, 0.0067707267589867115, 0.022125527262687683, 0.010115913115441799, 0.0086631597951054573, 0.011958577670156956, 0.01524143572896719, 0.014235568232834339, 0.0054796738550066948, 0.0057435529306530952, 0.00552797457203269, 0.011278554797172546, 0.0048989630304276943, 0.0099448570981621742, 0.0052410494536161423, 0.0059671574272215366, 0.006575489416718483, 0.0090706357732415199, 0.0079294843599200249, 0.011552620679140091, 0.0069234590046107769, 0.01057872548699379, 0.013113908469676971, 0.010449150577187538, 0.0072644227184355259, 0.0084100738167762756, 0.0084114233031868935, 0.0074345776811242104, 0.0070996526628732681, 0.01000224519520998, 0.007906230166554451, 0.014146139845252037, 0.010711436159908772, 0.013613112270832062, 0.0069346232339739799, 0.012622315436601639, 0.010550865903496742, 0.0065041691996157169, 0.011920786462724209, 0.012694115750491619, 0.0054975515231490135, 0.01083946879953146, 0.0095486389473080635, 0.0077314665541052818, 0.011479043401777744, 0.011338754557073116, 0.0073346733115613461, 0.012495496310293674, 0.012016990222036839, 0.0047090491279959679, 0.010728513821959496, 0.0075114169158041477, 0.016905181109905243, 0.015037895180284977, 0.011214817874133587, 0.004019521176815033, 0.01926511712372303, 0.013459728099405766, 0.0096971215680241585, 0.0073386034928262234, 0.01178518682718277, } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&g0::quant6_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data12[96] = { 2389, 2478, 165, -1335, 2769, 3693, 3220, 522, -662, 3543, 1126, -1491, 2430, 1097, -74, 38, 2251, 4056, 117, 274, 3230, 8901, 5071, -1540, -3279, -128, 4602, -391, 404, 311, 3477, -1202, 3429, 853, 3673, -2152, 111, -4049, 537, 1364, 2861, 1032, 1179, 40, 714, 1386, 2599, 1432, 1924, 990, 3399, 2960, -1986, 1521, 302, 1617, 1508, 2190, 4075, 1296, -846, 2603, 2735, 2549, 1465, 5184, -2930, 1020, 2873, -631, 2376, 350, 1128, 1188, 2000, 1913, -474, 1241, 864, 1346, 1892, 2351, 3736, 834, 1687, 3502, 652, -698, 11764, 70, 133, -409, 5132, 1045, -274, -224, };
const TfArray<96, float> quant12_scale = { 96, { 0.00026843271916732192, 0.00018641988572198898, 0.00035983696579933167, 0.00022933995933271945, 0.00021467207989189774, 0.0001906381658045575, 0.00022648749290965497, 0.00034042540937662125, 0.00021360856771934777, 0.0001926789409480989, 0.00025571737205609679, 0.0002581909648142755, 0.00025776581605896354, 0.00034147920086979866, 0.00036523508606478572, 0.0003106925287283957, 0.00031139547354541719, 0.00015934524708427489, 0.00029810593696311116, 0.00038454646710306406, 0.00021740203374065459, 0.00011193857062608004, 0.00015197506581898779, 0.00023992125352378935, 0.00019653361232485622, 0.00033221647026948631, 0.00017313603893853724, 0.00025054247817024589, 0.00036857597297057509, 0.00027874403167515993, 0.00021028571063652635, 0.00031100024352781475, 0.00019990658620372415, 0.00043607503175735474, 0.00021807583107147366, 0.00023784056247677654, 0.00035432734875939786, 0.00017318659229204059, 0.00022911075211595744, 0.00030156483990140259, 0.00019115135364700109, 0.00033342302776873112, 0.00037561534554697573, 0.00048295178567059338, 0.00046786596067249775, 0.00034415553091093898, 0.00025388476205989718, 0.00036707211984321475, 0.00025008161901496351, 0.00041744444752112031, 0.00023869620054028928, 0.00017777518951334059, 0.00023512737243436277, 0.00029864857788197696, 0.0004556050116661936, 0.00031266076257452369, 0.00028934021247550845, 0.00021941297745797783, 0.00017866704729385674, 0.00024444080190733075, 0.0003670602454803884, 0.00024014718655962497, 0.00024456408573314548, 0.00027443116414360702, 0.0003163758956361562, 0.00016272412904072553, 0.00023283924383576959, 0.00031923557980917394, 0.00018008527695201337, 0.00035535320057533681, 0.00024777950602583587, 0.00030451282509602606, 0.00029518597875721753, 0.00026680401060730219, 0.00022113529848866165, 0.00019389437511563301, 0.00037159820203669369, 0.00036390661261975765, 0.00032408247352577746, 0.00031373219098895788, 0.00028332509100437164, 0.00022934726439416409, 0.00017821801884565502, 0.00025595549959689379, 0.00026733323466032743, 0.00022060656920075417, 0.00035501390811987221, 0.00046178986667655408, 8.8237589807249606e-05, 0.0003944594063796103, 0.00050424551591277122, 0.0002934634976554662, 0.00014807963452767581, 0.00029717475990764797, 0.00037121810601092875, 0.00021814698993694037, } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data13[96*1*1*16] = { 
  /* [0][0][][] */ -7,69,-41,11,10,-13,-17,-60,19,-72,62,-74,96,-58,-22,-127, 
  /* [1][0][][] */ -120,19,-52,-127,-101,-15,25,84,0,-32,43,-77,75,69,54,73, 
  /* [2][0][][] */ -60,16,-39,30,-33,-65,-2,-9,-50,127,85,32,16,24,-13,68, 
  /* [3][0][][] */ -90,-51,40,-16,-127,41,-33,-112,26,-12,78,-116,-48,-15,-111,-83, 
  /* [4][0][][] */ 127,41,-58,88,-38,29,-115,85,-12,46,-17,100,-33,-34,-21,-65, 
  /* [5][0][][] */ -110,9,-34,11,79,-79,-49,-30,110,12,-23,-67,50,-127,-64,-43, 
  /* [6][0][][] */ -32,-54,-53,45,-44,84,56,-8,8,-19,127,-46,-29,24,-69,33, 
  /* [7][0][][] */ 8,127,76,-106,85,105,31,-18,1,22,-41,-47,12,36,-12,98, 
  /* [8][0][][] */ -91,-36,80,-48,98,50,60,92,-41,17,-110,-127,5,55,-32,-105, 
  /* [9][0][][] */ 62,69,109,-13,-53,1,-42,-120,19,-24,127,55,-66,-43,76,-51, 
  /* [10][0][][] */ -52,-97,-28,-127,-109,46,75,73,-74,-29,-41,8,17,104,-107,68, 
  /* [11][0][][] */ 64,-74,-38,45,-63,1,74,22,127,120,-12,7,48,-37,-41,117, 
  /* [12][0][][] */ -20,-21,127,19,71,13,-11,15,79,-47,46,82,-51,42,-44,52, 
  /* [13][0][][] */ -29,-51,-9,45,-15,-17,127,53,-57,35,33,-16,6,117,50,-31, 
  /* [14][0][][] */ 58,-30,127,38,91,82,116,80,27,17,80,-1,86,-1,-7,-7, 
  /* [15][0][][] */ -28,74,-17,-8,4,127,-86,78,-9,-43,-7,-34,-14,71,-44,-14, 
  /* [16][0][][] */ -54,31,70,-16,-3,88,-20,15,15,32,10,16,95,23,52,127, 
  /* [17][0][][] */ 56,68,123,-86,75,1,-37,-123,-13,127,16,16,-23,-72,61,-104, 
  /* [18][0][][] */ -94,-26,-32,-99,118,95,-10,-26,7,39,127,33,21,60,-61,22, 
  /* [19][0][][] */ 13,127,47,31,16,0,17,23,-49,119,58,67,73,78,-68,55, 
  /* [20][0][][] */ 62,34,-34,103,-107,-43,-65,85,5,-16,-86,-77,127,-9,68,29, 
  /* [21][0][][] */ -45,-35,-45,118,-49,30,-127,78,-21,23,52,-10,-57,54,-24,34, 
  /* [22][0][][] */ 32,41,-120,-25,119,-38,-80,103,108,127,12,117,-60,-6,22,-1, 
  /* [23][0][][] */ -42,47,-44,40,42,83,127,57,-45,100,4,-2,-30,55,-86,-58, 
  /* [24][0][][] */ 73,-127,7,41,108,76,44,-4,24,-8,88,72,-111,75,30,-59, 
  /* [25][0][][] */ 72,-78,34,47,37,22,3,101,126,-48,-16,-22,127,-15,49,64, 
  /* [26][0][][] */ 74,58,56,99,86,20,-80,-41,-24,25,40,127,50,-26,-7,-73, 
  /* [27][0][][] */ -12,61,-26,-16,-55,52,-18,-102,-9,-96,125,48,0,-65,127,47, 
  /* [28][0][][] */ 0,55,-28,-127,54,-32,-30,-10,-105,37,-12,53,-47,-10,8,84, 
  /* [29][0][][] */ 59,127,-106,12,2,54,-16,9,19,77,38,31,-97,45,-55,109, 
  /* [30][0][][] */ -50,33,-121,-19,33,-60,39,38,-16,69,-25,-36,36,21,18,127, 
  /* [31][0][][] */ -11,-58,36,3,78,-23,-31,57,15,31,46,-55,-86,12,-1,127, 
  /* [32][0][][] */ -18,22,27,61,-54,71,-17,76,45,-127,-6,-40,-4,6,3,12, 
  /* [33][0][][] */ -36,17,74,52,20,-8,-18,36,-59,-18,-13,10,-31,21,31,127, 
  /* [34][0][][] */ 16,41,-127,-71,92,19,25,99,-10,20,34,-47,-88,8,-70,110, 
  /* [35][0][][] */ 108,13,3,-36,-25,-3,-114,-50,-44,-127,-88,37,-30,-12,79,-8, 
  /* [36][0][][] */ 20,44,-125,-38,56,127,-33,9,-47,37,21,50,38,-3,-37,66, 
  /* [37][0][][] */ 79,65,85,-18,22,-82,65,-47,-127,24,-108,7,-22,48,118,0, 
  /* [38][0][][] */ -5,101,63,-13,4,-7,43,-127,41,-31,-81,5,-85,-127,-54,-16, 
  /* [39][0][][] */ 100,67,-72,-67,13,7,39,-81,35,-34,-27,-4,22,35,-127,-86, 
  /* [40][0][][] */ -78,-6,-127,-72,-25,-51,59,-125,-43,-47,39,-77,82,124,13,112, 
  /* [41][0][][] */ -4,-49,-35,127,-27,11,-79,17,-29,-16,29,-26,-80,19,29,-6, 
  /* [42][0][][] */ -38,30,-37,-127,38,-8,27,-2,22,-24,-13,-9,80,6,-37,32, 
  /* [43][0][][] */ -20,13,-21,-9,127,46,43,40,32,55,21,-92,-71,-14,-36,12, 
  /* [44][0][][] */ 43,11,0,10,1,14,26,51,46,-7,46,-16,127,27,-64,-2, 
  /* [45][0][][] */ -10,-44,-74,7,-56,-47,-19,61,0,6,33,3,-43,127,9,-5, 
  /* [46][0][][] */ -42,-97,65,30,29,-33,-112,12,54,-14,11,-46,-3,88,92,127, 
  /* [47][0][][] */ -9,-66,38,85,-21,-25,67,-6,26,-32,-127,-7,59,-49,-29,-9, 
  /* [48][0][][] */ -43,127,-52,8,40,98,-41,-92,-7,9,3,-89,89,-92,-93,-34, 
  /* [49][0][][] */ -25,29,13,-8,-22,28,127,82,-49,-54,14,39,-16,49,-18,47, 
  /* [50][0][][] */ 16,41,-85,52,54,-127,-8,26,-87,66,-8,-26,40,-39,-116,-13, 
  /* [51][0][][] */ -20,102,-76,91,-81,89,-90,-127,-87,-60,39,-24,-36,76,23,108, 
  /* [52][0][][] */ -99,-19,45,23,-2,19,84,-15,-13,-107,-67,-16,-127,-81,-89,-34, 
  /* [53][0][][] */ -15,-120,-100,-101,-4,31,50,127,4,-111,-91,69,7,69,110,77, 
  /* [54][0][][] */ -19,-70,28,-32,-22,75,17,-44,11,-44,16,50,11,17,-127,7, 
  /* [55][0][][] */ 8,-2,-11,47,29,0,74,51,-71,-26,-127,-7,28,-47,3,10, 
  /* [56][0][][] */ 30,-1,-74,7,-74,48,-127,24,-38,-44,-3,41,54,-5,71,37, 
  /* [57][0][][] */ -77,-19,-10,1,89,7,17,68,-4,72,28,-38,-82,40,-127,-52, 
  /* [58][0][][] */ 61,-32,33,3,15,-47,-89,-102,90,-127,-109,32,-123,-92,-7,37, 
  /* [59][0][][] */ -113,-66,34,-27,53,96,-69,-84,50,100,-127,-25,12,41,-56,38, 
  /* [60][0][][] */ -3,-22,-22,35,-127,-19,5,25,17,59,5,19,21,-13,12,56, 
  /* [61][0][][] */ 47,57,-51,17,-18,8,-89,-103,11,-22,64,127,35,-84,70,27, 
  /* [62][0][][] */ 15,15,68,-48,17,0,7,68,-21,127,47,42,55,62,33,118, 
  /* [63][0][][] */ 37,-127,8,5,-81,31,22,-42,10,-38,-19,-32,-52,91,110,11, 
  /* [64][0][][] */ 20,23,-127,-1,42,68,-2,12,-33,-108,9,27,80,-3,-82,56, 
  /* [65][0][][] */ 25,29,24,86,42,-50,104,107,-68,31,-79,-100,59,127,-33,18, 
  /* [66][0][][] */ -5,-73,-36,-111,-26,-127,68,-55,24,-6,-11,41,-80,-7,-84,39, 
  /* [67][0][][] */ -55,-101,-38,-54,-100,127,-33,-75,-36,8,-66,-48,11,-44,-85,67, 
  /* [68][0][][] */ 104,12,65,28,-127,-23,-115,-99,-45,-86,14,27,1,-70,118,-111, 
  /* [69][0][][] */ 9,25,17,-40,-24,-18,-61,45,-32,127,-3,-16,-25,49,77,-2, 
  /* [70][0][][] */ 63,23,6,91,-127,-1,-42,-54,53,77,53,25,13,-18,25,46, 
  /* [71][0][][] */ 127,-95,21,115,-100,5,-2,15,125,39,-4,-2,20,-19,-13,-21, 
  /* [72][0][][] */ 21,-8,61,110,17,28,-127,42,40,-34,61,32,-9,-29,-31,96, 
  /* [73][0][][] */ 22,-21,20,-68,22,-106,-96,77,22,127,5,-22,46,-102,-10,0, 
  /* [74][0][][] */ 75,47,78,89,-117,1,11,31,-127,-88,48,-88,0,-49,45,-15, 
  /* [75][0][][] */ 43,84,-127,50,90,22,-51,-61,16,-55,78,41,-72,82,21,104, 
  /* [76][0][][] */ -36,-9,22,-60,-68,-27,99,-26,-75,-2,60,62,-67,-127,5,53, 
  /* [77][0][][] */ -11,127,-51,44,-76,-28,3,94,3,-18,20,86,14,75,25,34, 
  /* [78][0][][] */ 124,9,-21,-3,-38,-1,-127,-46,20,-40,-86,-21,55,-112,-5,24, 
  /* [79][0][][] */ -26,-73,76,91,-62,-127,-88,-87,18,57,54,54,-24,73,-13,104, 
  /* [80][0][][] */ 16,108,-10,-127,20,53,43,4,41,-15,1,-12,95,-10,-28,-32, 
  /* [81][0][][] */ 2,-79,-14,-122,106,62,19,127,59,51,-44,-69,12,43,-103,-29, 
  /* [82][0][][] */ 104,74,35,-32,83,-122,-8,9,30,127,1,56,-42,-71,65,-126, 
  /* [83][0][][] */ -61,33,42,40,100,82,127,114,24,8,-54,-84,-38,47,-75,-46, 
  /* [84][0][][] */ -30,-99,26,44,-30,-97,-31,61,-100,16,-16,-41,-127,21,25,-76, 
  /* [85][0][][] */ -69,17,-2,30,19,-84,-88,-77,23,82,-22,-37,-96,-127,-37,86, 
  /* [86][0][][] */ -37,74,51,66,4,-4,18,41,-20,45,-16,-85,-4,86,-127,-29, 
  /* [87][0][][] */ 3,21,127,-5,-66,-45,-1,-8,48,-2,-9,56,-25,-3,11,-24, 
  /* [88][0][][] */ 9,-29,-127,53,2,62,28,50,-48,-36,-64,-116,71,18,-24,65, 
  /* [89][0][][] */ 8,41,-5,-127,-15,-34,-68,69,87,-35,43,-111,-17,-10,30,-48, 
  /* [90][0][][] */ 25,85,44,34,-11,58,11,127,-18,-30,13,91,24,35,-15,48, 
  /* [91][0][][] */ -19,43,-59,34,127,96,-4,-85,-82,76,28,54,-74,-99,-105,-57, 
  /* [92][0][][] */ 3,36,34,-54,-94,-31,-54,20,-8,91,127,110,17,-54,96,43, 
  /* [93][0][][] */ 127,8,59,71,-81,-101,43,53,-47,-85,8,-31,-9,-20,23,28, 
  /* [94][0][][] */ -9,-127,41,-67,31,49,1,-16,88,-37,-18,66,-8,30,-21,16, 
  /* [95][0][][] */ -86,-106,8,-25,96,86,-75,88,60,90,-44,24,1,102,-127,5, 
};
const TfArray<96, float> quant13_scale = { 96, { 0.0022672202903777361, 0.0015745284035801888, 0.003039233386516571, 0.0019370373338460922, 0.0018131504766643047, 0.0016101566143333912, 0.0019129450665786862, 0.0028752805665135384, 0.0018041678704321384, 0.0016273932997137308, 0.0021598245948553085, 0.0021807169541716576, 0.0021771262399852276, 0.0028841812163591385, 0.0030848267488181591, 0.0026241524610668421, 0.0026300896424800158, 0.0013458522735163569, 0.0025178445503115654, 0.00324793322943151, 0.0018362080445513129, 0.00094544881721958518, 0.0012836026726290584, 0.0020264084450900555, 0.0016599503578618169, 0.0028059468604624271, 0.0014623312745243311, 0.0021161169279366732, 0.0031130441930145025, 0.0023543110582977533, 0.0017761025810614228, 0.0026267515495419502, 0.0016884390497580171, 0.0036831507459282875, 0.0018418990075588226, 0.002008834620937705, 0.0029926984570920467, 0.0014627581695094705, 0.0019351014634594321, 0.002547058742493391, 0.0016144911060109735, 0.0028161376249045134, 0.0031724998261779547, 0.0040790783241391182, 0.0039516612887382507, 0.0029067858122289181, 0.0021443462464958429, 0.003100342582911253, 0.0021122242324054241, 0.0035257942508906126, 0.0020160614512860775, 0.0015015141107141972, 0.0019859187304973602, 0.0025224275887012482, 0.0038481035735458136, 0.0026407765690237284, 0.0024438078980892897, 0.0018531926907598972, 0.0015090468805283308, 0.002064581261947751, 0.0031002422329038382, 0.0020283167250454426, 0.0020656224805861712, 0.0023178840056061745, 0.0026721551548689604, 0.0013743907911702991, 0.0019665928557515144, 0.0026963083073496819, 0.0015210254350677133, 0.0030013627838343382, 0.0020927803125232458, 0.0025719578843563795, 0.0024931821972131729, 0.0022534639574587345, 0.0018677397165447474, 0.0016376590356230736, 0.0031385703478008509, 0.0030736061744391918, 0.0027372459881007671, 0.0026498259976506233, 0.0023930033203214407, 0.0019370990339666605, 0.0015052543021738529, 0.0021618360187858343, 0.0022579338401556015, 0.0018632739083841443, 0.0029984971042722464, 0.0039003419224172831, 0.00074526702519506216, 0.0033316593617200851, 0.0042589283548295498, 0.0024786337744444609, 0.0012507012579590082, 0.0025099795311689377, 0.0031353600788861513, 0.0018424999434500933, } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data14[16] = { -26186, -4610, 3448, -12611, 11451, -13898, 19366, -8347, 11013, -8305, 10547, 12315, -3151, -35788, 1229, 3000, };
const TfArray<16, float> quant14_scale = { 16, { 8.9584114903118461e-05, 6.0174632380949333e-05, 6.0604103055084124e-05, 7.4640345701482147e-05, 9.7877098596654832e-05, 0.00012643246736843139, 7.3132403485942632e-05, 6.7947294155601412e-05, 0.00011438348155934364, 0.00012059143045917153, 0.00012995905126444995, 6.5408006776124239e-05, 0.00010889211262110621, 6.7544526245910674e-05, 7.4626346759032458e-05, 7.7809425420127809e-05, } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data15[16*1*1*96] = { 
  /* [0][0][][] */ 42,3,32,37,-38,-49,-34,-26,-2,-94,-10,-27,76,-45,75,9,-106,-8,15,28,101,-1,-89,-11,-29,85,105,92,35,51,78,-60,27,23,30,-1,8,4,13,13,94,-4,3,2,-30,14,25,-20,47,-15,116,18,-48,-26,16,54,-30,-62,28,-1,10,13,-42,9,34,16,86,9,-19,-43,1,5,27,58,29,11,35,-54,69,-1,2,69,57,11,-35,-12,-30,46,38,27,-109,-43,42,-10,127,91, 
  /* [1][0][][] */ -3,54,-61,-34,19,-20,58,-43,-73,-12,-33,-59,-23,-16,12,-25,-47,0,-6,-34,-33,-55,116,-8,-22,-6,22,71,-23,27,-11,-7,-6,40,32,-16,-39,25,-69,50,45,-10,-20,-59,63,-70,14,9,-91,-22,63,-68,-55,56,32,30,7,41,-76,32,-17,21,-33,-34,49,3,66,-14,-15,-127,-14,24,39,35,-39,49,-25,-45,108,-45,55,10,66,-71,-44,-31,5,-9,-37,-58,47,20,41,-28,-49,66, 
  /* [2][0][][] */ 34,-47,-4,14,101,78,-88,53,-92,27,43,-6,65,12,49,11,60,-57,-127,-37,5,-75,10,52,26,5,-78,44,-19,-48,-46,108,-45,-69,-29,-7,-27,55,-2,-48,59,41,31,24,32,41,32,-33,-126,-19,-47,-5,-4,33,-10,-97,67,52,25,14,-55,-38,-1,91,22,-30,-16,22,20,19,-41,-19,0,35,7,59,-90,-37,-56,-65,17,15,88,-44,11,-76,-41,-34,-44,-16,-41,56,24,-35,125,-23, 
  /* [3][0][][] */ 58,-60,-44,-83,16,-52,127,-5,0,89,-49,6,31,2,-42,35,77,17,-47,-8,-23,-3,-5,29,-65,96,24,18,-64,-36,-87,83,-24,-43,4,-1,25,-27,-2,33,-18,34,5,45,76,-72,19,7,21,-48,2,-13,119,14,5,-27,23,2,-31,-18,-57,11,86,19,-53,-48,90,-10,-58,-38,-71,2,-10,-91,-21,-94,-7,-68,94,-27,-32,-75,-11,-22,-8,-65,46,96,-62,66,-31,-24,31,-98,4,54, 
  /* [4][0][][] */ -42,49,45,-5,-28,-9,-49,-36,29,-11,-15,5,2,21,-37,37,9,-54,2,-46,7,-12,-37,31,-41,-48,-3,-2,-48,127,-28,-32,21,-54,15,-9,44,20,-47,19,30,-10,30,-17,-60,-22,28,-36,37,3,-38,-25,-74,41,56,35,21,66,-3,0,-12,-45,-6,21,63,38,-39,-24,-17,-17,24,-44,6,36,63,72,-12,32,-70,51,32,39,41,-38,20,-74,-43,-75,-16,-59,-60,5,17,24,11,-43, 
  /* [5][0][][] */ 12,7,22,-35,5,-5,-32,-14,55,24,-34,-21,-35,-12,6,-3,-28,-12,-34,-17,-38,-1,-5,28,38,-60,83,-35,12,57,-5,60,8,-100,4,-7,-21,-46,-14,17,-67,-19,-39,-5,20,37,-89,8,-3,33,66,-27,7,-58,-13,2,-40,-72,-9,-53,57,39,40,62,-22,26,127,-40,10,-41,29,-1,14,12,53,-7,11,2,114,55,-41,4,-47,44,26,79,21,77,-14,-51,-24,-6,-5,3,-47,3, 
  /* [6][0][][] */ 45,-24,36,36,-60,73,-16,-62,4,-92,-49,75,31,35,-4,53,33,9,-11,-58,-98,4,-99,-29,-20,-20,17,38,-126,21,8,-3,12,53,-41,21,24,-58,40,-41,-79,10,51,-54,44,67,-60,-31,21,-16,-97,-127,96,-18,-56,-42,-3,0,-3,-43,-37,-62,58,-25,24,-90,-34,-29,-60,-10,-38,-44,-8,-111,-4,-66,50,34,-42,14,-52,48,-6,-61,34,-14,11,-25,-87,92,-96,100,15,-18,85,-112, 
  /* [7][0][][] */ 14,-36,-34,34,-4,23,14,-27,-120,-22,104,29,-27,-79,23,-57,-35,22,-25,23,-24,1,-63,-15,92,68,-30,93,24,7,44,51,-26,-99,52,78,-27,-9,-64,30,16,14,-21,-51,52,78,42,105,9,69,-23,27,51,-67,19,-79,-40,8,-52,-44,80,32,31,-10,94,-24,127,-40,-34,-1,91,27,-40,-52,-100,-48,4,-61,118,-56,15,14,-96,-58,19,44,-96,67,-34,39,-20,6,87,18,60,17, 
  /* [8][0][][] */ -24,-34,23,-10,-25,11,0,-20,5,12,24,22,-3,9,-20,12,76,-18,29,15,-27,-48,-14,-33,-6,-46,76,-12,-2,56,20,-42,3,-18,15,16,-55,-31,-1,-6,11,20,8,-18,-5,0,5,4,46,-18,57,18,-20,25,-52,16,-30,107,-36,-19,3,-38,-37,-20,-58,-15,-2,0,-23,-6,48,-34,-8,-127,52,-75,25,28,-35,32,-8,-24,-14,66,39,-37,-19,28,-16,59,26,-2,-59,16,-18,-69, 
  /* [9][0][][] */ -8,-38,-9,35,19,31,19,49,-53,-13,69,63,-8,63,7,-56,0,14,-33,-53,16,19,-19,23,-35,36,-9,29,14,-21,-2,8,-29,-34,-10,32,-2,11,36,-16,-25,-6,26,-14,23,23,18,20,-53,-8,-28,11,127,2,-25,-13,30,3,13,30,-42,-13,56,24,-4,4,40,22,43,-21,-33,5,-10,-92,-48,-90,-43,-26,20,-17,-19,13,18,-51,52,-3,-62,-8,-18,112,48,12,30,14,4,41, 
  /* [10][0][][] */ 34,22,-3,13,1,28,-21,-3,42,-8,-17,33,31,23,11,-63,-12,-15,2,-15,36,-26,-31,-41,-4,-1,-97,52,-33,61,-17,25,2,5,-31,18,27,19,18,-16,20,7,65,-52,-11,-18,31,9,0,-12,-5,-36,-3,-26,-17,16,5,22,-26,9,-26,-47,10,25,-18,-27,-94,-10,-29,1,24,-29,-32,12,15,1,28,-32,-95,-5,-25,13,16,-19,22,-8,-77,-127,-36,38,25,3,29,-42,31,42, 
  /* [11][0][][] */ 0,-22,22,-14,-39,22,34,-13,93,4,-42,-64,1,-11,34,10,-52,72,44,-45,27,52,38,-5,60,-8,85,-21,52,-81,-9,-4,40,127,-81,-15,-7,-35,38,32,-30,71,4,36,-67,22,-33,14,72,1,-4,6,-1,38,-102,116,-10,-19,17,-53,45,24,-31,-88,14,-26,-111,-101,20,-15,-72,10,74,41,12,22,55,37,-95,-58,9,17,-36,-24,-1,16,38,102,0,-71,29,-14,-15,50,63,53, 
  /* [12][0][][] */ 35,40,-47,-5,30,-3,-13,49,29,-49,34,15,18,3,13,-7,25,-19,-4,-7,27,31,20,27,-51,-14,-127,9,47,-4,8,16,-33,-80,43,12,45,6,14,-2,-20,-31,30,12,55,-19,38,-31,-79,-19,-60,65,81,-37,10,-81,25,2,-50,-46,-4,27,83,21,-29,3,10,4,77,6,3,7,-14,-33,-26,12,-48,-66,21,-76,36,-58,9,-51,21,22,-12,-107,-24,47,-17,0,-4,76,27,19, 
  /* [13][0][][] */ 9,1,-108,54,56,43,14,32,8,53,-16,73,-30,-1,98,-81,39,35,46,-11,-9,-73,-30,42,26,79,-47,53,34,72,38,3,-42,101,-29,31,47,-19,-35,-83,-21,9,44,-7,80,34,-11,32,-79,17,-26,-21,6,-72,49,22,41,-26,-39,-42,3,-2,-21,-6,-6,80,127,68,51,25,-81,-44,21,89,-116,88,-3,-109,125,-71,-39,-63,53,-23,59,42,-63,1,-43,-3,-14,32,24,-9,96,90, 
  /* [14][0][][] */ 15,28,45,0,-87,-22,-4,68,-60,-50,102,35,-60,9,99,-48,-29,15,-88,48,-3,1,-127,-11,-78,23,-81,-97,39,-29,6,107,-87,55,-8,-41,-52,-101,13,-69,7,-13,78,0,11,27,-56,51,-39,-24,66,56,8,4,-59,9,-36,57,-23,69,17,92,-34,21,39,-32,28,-48,70,41,56,63,-36,62,34,38,7,10,17,-5,-99,104,23,-116,113,21,-26,36,-92,-43,-45,-30,-55,-11,65,60, 
  /* [15][0][][] */ 42,-7,42,5,11,-14,11,-27,-1,48,-29,7,37,37,17,4,-28,28,-47,26,-18,-5,34,46,79,-50,96,3,18,-5,-15,38,78,71,21,-48,34,39,37,66,100,13,-38,-16,-54,-83,11,-8,-7,3,7,17,16,-26,-46,67,10,27,11,-4,25,-64,-47,47,56,62,-46,12,15,-6,16,-24,21,-127,-17,-109,3,38,-86,49,90,-8,22,5,-66,19,15,-38,11,100,32,-74,-5,-5,9,-53, 
};
const TfArray<16, float> quant15_scale = { 16, { 0.0038073246832937002, 0.0025574218016117811, 0.0025756743270903826, 0.0031722146086394787, 0.0041597764939069748, 0.0053733796812593937, 0.0031081270426511765, 0.0028877600561827421, 0.0048612980172038078, 0.0051251356489956379, 0.0055232592858374119, 0.0027798402588814497, 0.0046279146336019039, 0.0028706423472613096, 0.003171619726344943, 0.0033069003839045763, } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data16[96] = { 5527, -959, -7552, 6614, 740, 1310, 2583, -343, 1842, -3456, -314, -899, 5860, -2855, -990, -4165, 151, -222, -8177, -256, -2330, -288, -4040, -478, -2, 6168, -10912, -5236, 255, -2110, -556, -837, 11852, -118, -2189, -629, -263, 7827, 3654, 9991, -537, 3562, 370, 5288, -315, -353, 5377, 743, -3689, -183, -2495, -462, 298, -4938, -80, 1513, 1291, 1460, 594, 1300, 169, -464, -459, 5234, 6016, -71, 14928, 6347, -976, 301, 7937, -1197, 167, 1417, -2804, -309, 15135, 9638, 9761, 11109, 9740, -1458, 5716, 8990, -622, -851, 8409, -8865, 6025, 335, -4931, -1520, 105, 1176, 15175, -990, };
const TfArray<96, float> quant16_scale = { 96, { 0.00017949441098608077, 0.00033734319731593132, 0.00015009420167189091, 0.00015234963211696595, 0.00026222722954116762, 0.00047645188169553876, 7.0304915425367653e-05, 0.00030502898152917624, 0.00037220376543700695, 0.00030274176970124245, 0.00034739606780931354, 0.00033660631743259728, 0.00013246799062471837, 0.0001831819536164403, 0.0003503680054564029, 0.00028899064636789262, 0.0003428583440836519, 0.00038536454667337239, 0.00014977066894061863, 0.00033732378506101668, 0.00032666203333064914, 0.00030084315221756697, 0.00013369199587032199, 0.00021938385907560587, 0.0021111743990331888, 0.00021600158652290702, 0.0002224030758952722, 0.00015046255430206656, 0.0004231549974065274, 0.00025103415828198195, 0.00022772669035475701, 0.00049027486238628626, 0.00011946538143092766, 0.00069045595591887832, 0.00019043798965867609, 0.00024566653883084655, 0.00038397024036385119, 0.00011082671699114144, 0.00015914364485070109, 0.00012829995830543339, 0.0005288144457153976, 0.00025271566119045019, 0.00025415612617507577, 0.00016882734780665487, 0.00024029536871239543, 0.00036090152570977807, 0.00018276841728948057, 0.00032316049328073859, 0.00029239291325211525, 0.00056209851754829288, 0.0003947833611164242, 0.00023970722395461053, 0.0002078165125567466, 0.00019786380289588124, 0.00034383856109343469, 0.00028151084552519023, 0.00016763593885116279, 0.00060233380645513535, 0.00050311151426285505, 0.00045030709588900208, 0.0003997840394731611, 0.00032135049696080387, 0.00022399051522370428, 0.00021289735741447657, 0.0003330013423692435, 0.00053532584570348263, 0.0001177293888758868, 0.00022305270249489695, 0.00028847987414337695, 0.0005135319079272449, 0.00017156943795271218, 0.00034681765828281641, 0.00062050530686974525, 0.00020193940144963562, 0.00023581653658766299, 0.00024231274437624961, 8.7363696366082877e-05, 0.00019026045629289001, 0.00013337042764760554, 0.00019992822490166873, 0.00013100822980049998, 0.00033342954702675343, 0.00018283314420841634, 0.0003015635593328625, 0.00016550089640077204, 0.00040308313327841461, 0.00018681991787161678, 0.00018323656695429236, 0.00017777863831724972, 0.00030894068186171353, 0.00016267858154606074, 0.00021412812930066139, 0.00027022106223739684, 0.00018989133241120726, 0.00011232651013415307, 0.00041056040208786726, } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data17[1*3*3*96] = { 
  /* [0][0][][] */ 7,10,-51,-72,127,17,98,12,8,18,5,6,19,-19,15,-45,-34,-15,-42,-46,20,2,52,9,19,16,-69,-38,-6,18,45,-13,-57,13,-31,-1,16,-106,-108,-50,20,-41,68,-48,2,50,-74,10,8,-13,-23,65,-30,-33,51,7,50,6,-9,3,12,9,-34,-69,7,-4,-22,-58,10,38,-43,-21,0,22,-22,20,-52,54,127,-66,-24,24,-31,-58,-48,2,-20,48,14,-31,-23,-4,-27,4,19,25, 24,49,114,-105,-13,22,120,-25,-17,-32,-45,34,-6,21,-58,26,-27,44,13,-62,-26,127,102,127,55,-30,23,117,93,14,127,-43,-127,-6,-94,-6,-37,-127,124,-1,-11,-127,15,-63,74,-9,-58,19,8,20,35,127,-54,81,-45,12,-56,9,-19,39,-28,-127,-74,6,-14,15,9,-37,13,31,-15,71,-127,8,32,-6,-51,-127,12,-127,-24,22,-20,-106,57,82,-94,10,-127,-17,-7,15,-11,87,-2,-56, 11,-16,40,-54,89,19,117,-41,-7,-11,-22,26,-43,19,14,-52,-30,-20,-50,-56,18,-14,-31,52,17,20,36,13,-14,-13,-10,25,37,12,-38,23,-20,6,-102,67,-23,31,-8,-39,9,-3,-66,3,-37,16,12,8,25,-43,29,6,126,0,-7,0,12,17,-66,-48,2,-14,127,-54,17,0,-39,-12,38,-12,26,34,-49,-18,-19,-58,-7,18,-115,-54,32,-8,-25,-55,-63,-48,-26,85,-17,48,21,29, 
  /* [0][1][][] */ -25,13,105,-89,74,127,2,7,10,-32,-7,9,-127,-1,36,20,-34,17,33,-3,4,5,127,6,65,45,117,-16,10,-17,18,-33,-36,-4,26,7,-26,-36,-127,-75,1,31,127,2,-38,127,-31,-84,19,34,29,-17,-73,119,70,-6,80,-13,17,9,29,-26,47,-14,-3,28,-9,-16,11,-22,-64,32,33,127,31,-45,-127,-108,-36,-92,-109,10,24,-34,60,1,-127,106,-81,127,40,-127,127,-21,-9,14, 101,127,127,74,-107,-111,84,-31,127,127,-55,-24,-98,127,-7,127,127,-127,127,127,127,-89,102,-75,-127,-127,127,127,-127,127,4,127,5,127,127,-105,127,124,-35,-70,127,34,-113,-59,127,-4,127,127,127,-127,127,-75,117,127,-127,127,-119,127,-127,127,-72,82,56,-127,127,127,-29,127,-71,-127,-59,-127,36,117,127,77,39,-80,96,-80,100,127,127,127,127,36,-75,127,-30,27,-34,-62,-127,-44,-127,-10, -127,-7,-2,-100,35,83,-127,23,-28,-32,12,127,-116,36,38,73,-42,25,14,-19,-8,1,12,7,65,36,16,-34,9,-23,35,3,-15,-18,37,127,15,-16,-64,-127,-50,19,56,-2,-31,-37,-28,-62,60,38,13,-44,127,51,51,-21,74,-10,29,-17,19,-45,-127,-67,-29,6,-32,-24,4,-15,-127,-19,4,-63,-15,127,-104,-86,-34,-41,-127,3,-2,-123,28,39,-110,19,17,-53,127,106,-69,-43,-91,12, 
  /* [0][2][][] */ -52,-50,25,-57,60,-31,-62,-4,-28,-16,42,3,-2,18,11,-57,13,-23,-68,-2,-32,10,-29,-46,25,22,21,-31,-21,-25,3,20,-45,-14,-27,4,-21,29,18,-63,-48,34,57,36,40,29,-7,-21,1,23,-1,-35,15,-74,44,6,-36,-2,-8,4,17,35,30,37,-50,-3,116,46,44,4,-45,22,-31,7,-27,-6,27,-27,-8,22,-77,-11,-17,13,-35,-22,-1,-46,-32,20,-27,-55,-36,11,-55,15, -57,-32,84,-127,-18,-30,124,127,-76,32,127,5,-81,36,127,94,-28,-46,17,-85,3,-10,47,38,42,-40,9,52,-31,-14,-50,-23,-89,-17,-100,18,-57,-16,18,-114,-44,-112,-13,127,44,0,0,21,-7,-25,7,-28,72,-2,-64,-17,-12,-29,25,-26,127,42,105,40,-86,-27,-37,-6,127,8,6,36,-6,-6,-4,-4,-58,-84,17,81,0,-4,-94,-52,3,-127,-45,-15,21,17,64,-35,-6,-127,-91,127, -55,23,-70,-44,51,-40,-53,35,-39,-22,0,56,2,-21,12,-60,-21,-9,-49,-60,14,16,-35,-36,17,-37,-50,-45,-24,17,-3,-13,-41,12,30,23,13,18,5,-51,-55,-35,27,32,37,14,-72,29,-47,-22,5,-33,25,-78,-2,-27,127,5,-4,1,-7,-6,15,48,3,-6,-8,47,41,-7,29,21,-63,-13,-28,-29,-61,-33,96,34,-73,14,-2,-38,-38,-17,4,-28,46,14,23,-16,-19,5,-51,12, 
};
const TfArray<96, float> quant17_scale = { 96, { 0.0076285121031105518, 0.014337086118757725, 0.0063790036365389824, 0.0064748590812087059, 0.01114465668797493, 0.020249204710125923, 0.0029879587236791849, 0.012963731773197651, 0.015818659216165543, 0.01286652497947216, 0.014764332212507725, 0.01430576853454113, 0.0056298892013728619, 0.007785232737660408, 0.014890640042722225, 0.01228210236877203, 0.014571479521691799, 0.016377992928028107, 0.0063652535900473595, 0.014336260035634041, 0.013883136212825775, 0.012785833328962326, 0.0056819096207618713, 0.0093238139525055885, 0.089724905788898468, 0.0091800671070814133, 0.0094521306455135345, 0.006394658237695694, 0.017984086647629738, 0.010668952018022537, 0.0096783842891454697, 0.020836681127548218, 0.0050772787071764469, 0.029344378039240837, 0.0080936141312122345, 0.010440828278660774, 0.016318734735250473, 0.0047101355157792568, 0.0067636044695973396, 0.0054527483880519867, 0.022474613040685654, 0.010740415193140507, 0.010801634751260281, 0.0071751624345779419, 0.010212552733719349, 0.015338314697146416, 0.007767657283693552, 0.013734321109950542, 0.012426698580384254, 0.023889187723398209, 0.016778292134404182, 0.010187556967139244, 0.008832201361656189, 0.0084092114120721817, 0.014613138511776924, 0.01196421030908823, 0.0071245273575186729, 0.025599187240004539, 0.02138223871588707, 0.019138051196932793, 0.016990821808576584, 0.013657395727932453, 0.0095195965841412544, 0.0090481378138065338, 0.014152556657791138, 0.022751348093152046, 0.0050034988671541214, 0.0094797397032380104, 0.012260394170880318, 0.021825104951858521, 0.007291700690984726, 0.014739749953150749, 0.02637147530913353, 0.0085824243724346161, 0.010022202506661415, 0.010298291221261024, 0.0037129570264369249, 0.0080860694870352745, 0.0056682429276406765, 0.0084969494491815567, 0.0055678496137261391, 0.014170755632221699, 0.0077704084105789661, 0.01281645055860281, 0.0070337881334125996, 0.017131032422184944, 0.0079398462548851967, 0.0077875540591776371, 0.0075555918738245964, 0.013129978440701962, 0.0069138398393988609, 0.0091004455462098122, 0.011484394781291485, 0.0080703813582658768, 0.0047738766297698021, 0.017448816448450089, } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&g0::quant6_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data18[96] = { 1088, 6245, -29, 659, 2226, 7671, -224, 806, 5362, -296, 13394, 1705, 775, 619, 2362, 604, 3381, 1974, 243, 10697, 322, 3888, -563, 549, -5988, 1270, 1101, 710, 2905, 423, 1609, 1883, 730, 9695, 1797, 2163, 1720, 836, 2013, 1021, 7084, 535, 844, 375, 1112, 4659, 7180, 3924, 586, -449, 1589, 2646, 1481, -3248, 3907, 408, 1021, 12458, 368, 562, 3429, 4296, 1482, -591, 9910, 5713, 720, 3572, 4051, 2019, 1683, 2006, -1734, 1803, 767, 1756, -63, 7033, 2876, 4733, 1168, 274, 1945, 17765, -387, 4801, 5877, 1502, -84, 1075, 360, 8295, 2481, 2535, 4736, 3679, };
const TfArray<96, float> quant18_scale = { 96, { 0.00038033106829971075, 0.00013764984032604843, 0.00050531578017398715, 0.00042483027209527791, 0.00024747263523750007, 0.00010878688772208989, 0.0002844791451934725, 0.00027536414563655853, 0.00014654458209406585, 0.00025644522975198925, 7.0748661528341472e-05, 0.00022780236031394452, 0.00028034395654685795, 0.00043424189789220691, 0.00019649352179840207, 0.00025830449885688722, 0.00020441012748051435, 0.00026614096714183688, 0.00022783204622101039, 9.3086637207306921e-05, 0.00045323243830353022, 0.00017088965978473425, 0.00026734580751508474, 0.00028778801788575947, 0.00010737532284110785, 0.00022809654183220118, 0.00035905936965718865, 0.00036102559533901513, 0.00026256515411660075, 0.00037206997512839735, 0.00029737930162809789, 0.00023578600666951388, 0.00044484573299996555, 9.9466487881727517e-05, 0.00023507593141403049, 0.0002378850185777992, 0.00028504809597507119, 0.0003863684250973165, 0.00019968014385085553, 0.00031365518225356936, 0.00011982656724285334, 0.00032919237855821848, 0.00032817854662425816, 0.00025697032106108963, 0.00025377658312208951, 0.00015994795830920339, 0.00011260528117418289, 0.00016937905456870794, 0.00031668576411902905, 0.00026423615054227412, 0.0003108148230239749, 0.00023041805252432823, 0.00025770190404728055, 0.00015625693777110428, 0.00016580041847191751, 0.00037154837627895176, 0.00023295723076444119, 7.8619275882374495e-05, 0.00025927933165803552, 0.00032931019086390734, 0.00015634609735570848, 0.0001752280950313434, 0.00035221443977206945, 0.00028170456062071025, 8.7034648458939046e-05, 0.00014082717825658619, 0.00044419631012715399, 0.00019495774176903069, 0.00016688149480614811, 0.00020494108321145177, 0.00034887684159912169, 0.00016460924234706908, 0.00027300015790387988, 0.0002999218413606286, 0.00036107917549088597, 0.00029814732261002064, 0.00032708558137528598, 0.00013008082169108093, 0.00023705266357865185, 0.00019797110871877521, 0.00029106900910846889, 0.00022592283494304866, 0.00020774400036316365, 5.9267662436468527e-05, 0.00027830185717903078, 0.00013443766511045396, 0.0001361604081466794, 0.00033928328775800765, 0.00043349980842322111, 0.00043292291229590774, 0.00030360740493051708, 0.00011683012417051941, 0.00024615909205749631, 0.00020405449322424829, 0.00013819549349136651, 0.00014656884013675153, } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data19[96*1*1*16] = { 
  /* [0][0][][] */ 8,-20,-23,70,-127,8,51,65,22,43,-45,7,-13,26,2,90, 
  /* [1][0][][] */ -49,56,-116,-25,97,127,-31,29,-55,45,-29,4,-80,56,-80,-10, 
  /* [2][0][][] */ -17,37,85,-20,37,57,-11,48,50,12,17,2,30,-127,10,-8, 
  /* [3][0][][] */ 127,-49,41,-20,6,5,11,34,10,51,-71,3,-12,21,-3,24, 
  /* [4][0][][] */ -38,13,35,61,-127,22,-45,4,-37,56,21,-76,-47,58,-65,78, 
  /* [5][0][][] */ -127,46,2,-18,98,63,37,39,-80,3,5,44,-99,86,-66,-6, 
  /* [6][0][][] */ -127,56,-73,9,-38,-59,114,46,35,-64,-36,17,-13,26,-24,41, 
  /* [7][0][][] */ -31,51,12,-103,82,69,127,36,6,-29,27,5,38,50,-53,31, 
  /* [8][0][][] */ -1,-47,-30,70,-18,95,-64,-31,48,-6,43,60,127,11,-107,-20, 
  /* [9][0][][] */ -43,-127,-38,89,-56,-28,-33,71,19,15,29,31,-85,34,-30,-5, 
  /* [10][0][][] */ -61,-70,-51,10,-64,127,14,-35,40,-24,18,0,60,115,-94,97, 
  /* [11][0][][] */ 0,-51,-61,-10,25,101,-6,-37,46,42,65,-65,44,54,-57,127, 
  /* [12][0][][] */ -62,-121,-108,127,-126,-80,-18,24,105,25,3,57,-40,-23,-57,28, 
  /* [13][0][][] */ -90,-44,-20,13,2,-16,17,35,-36,127,-29,-6,26,54,35,-32, 
  /* [14][0][][] */ -123,-53,-72,-6,15,103,15,-47,127,-83,88,32,104,-12,-102,-36, 
  /* [15][0][][] */ -15,-127,64,-66,-67,-14,-13,31,33,-60,-60,-51,54,-55,-41,-60, 
  /* [16][0][][] */ 2,-63,54,-15,7,0,-48,0,96,-111,14,7,-34,-25,-56,-127, 
  /* [17][0][][] */ 13,34,-7,-19,46,-29,-57,31,44,-19,50,84,59,-91,-51,-127, 
  /* [18][0][][] */ 31,29,-58,-126,-23,6,127,-68,-6,21,-35,22,21,33,-35,-73, 
  /* [19][0][][] */ -55,-52,-53,-21,-66,1,16,27,-4,-68,-6,-127,18,13,-42,26, 
  /* [20][0][][] */ 41,33,82,-49,25,22,-67,99,-61,-127,55,-95,-58,61,12,13, 
  /* [21][0][][] */ 48,-127,-65,34,42,71,33,119,-105,-36,-57,-23,53,-126,12,-17, 
  /* [22][0][][] */ 26,19,45,17,-23,-20,31,49,-4,84,54,50,19,21,127,21, 
  /* [23][0][][] */ -62,-26,-47,20,22,65,43,36,-33,-22,-30,-100,27,23,76,127, 
  /* [24][0][][] */ 57,23,5,73,-18,-66,53,-105,-13,104,-91,124,15,-110,127,-116, 
  /* [25][0][][] */ 127,-17,114,61,64,40,20,-4,-119,92,10,-75,24,-12,25,-43, 
  /* [26][0][][] */ -5,37,24,23,-36,88,-1,19,-39,-18,-86,44,16,4,55,-127, 
  /* [27][0][][] */ 12,-22,-25,-23,-23,20,-88,28,-108,-39,-40,-18,-46,57,-36,127, 
  /* [28][0][][] */ -36,34,-2,20,1,-32,-127,22,18,-47,18,11,30,-62,-40,-48, 
  /* [29][0][][] */ -43,-127,-44,107,-4,-11,96,27,93,74,-124,39,51,-45,-26,48, 
  /* [30][0][][] */ 57,-65,-29,-17,-127,45,22,-42,32,20,25,-43,10,17,-31,37, 
  /* [31][0][][] */ -127,15,-17,53,-5,31,-17,23,-46,-67,-13,0,4,-19,9,103, 
  /* [32][0][][] */ -127,-38,-99,-30,-48,-14,28,-37,67,70,-18,-79,57,60,0,13, 
  /* [33][0][][] */ -31,-19,-48,7,-127,-103,16,-32,-65,41,-70,-21,8,105,34,28, 
  /* [34][0][][] */ 3,22,22,58,-28,-64,0,35,-9,-127,-42,4,-48,26,62,99, 
  /* [35][0][][] */ 76,28,-103,17,-100,49,127,-1,-6,84,18,22,-11,41,67,101, 
  /* [36][0][][] */ -30,22,-18,20,127,9,61,29,-86,39,-93,-39,49,11,-18,49, 
  /* [37][0][][] */ -127,69,-28,-88,12,-51,-8,-55,-34,-46,5,16,24,-92,-13,-78, 
  /* [38][0][][] */ 71,59,52,-31,-59,-92,-77,-15,-75,-30,80,96,-102,-127,111,31, 
  /* [39][0][][] */ -29,-14,-24,31,-18,97,101,-72,-51,13,-16,-50,-40,78,15,127, 
  /* [40][0][][] */ 52,66,33,102,-74,-16,27,49,-34,20,22,16,-62,9,127,30, 
  /* [41][0][][] */ -44,14,-15,24,-107,127,26,70,-74,2,-76,-14,-7,53,21,-89, 
  /* [42][0][][] */ -20,-51,48,-43,127,-3,78,-19,-48,-50,-102,-48,17,19,-36,56, 
  /* [43][0][][] */ 3,-104,-65,-27,59,-20,28,103,-21,-82,-127,-32,55,-40,-14,75, 
  /* [44][0][][] */ 2,-73,-92,-42,-4,29,22,43,4,-127,-20,86,-3,11,53,113, 
  /* [45][0][][] */ -30,-71,-29,19,-127,81,6,-20,74,-13,-3,-65,-26,38,-5,12, 
  /* [46][0][][] */ -2,-52,-46,-28,118,-53,-49,127,-36,5,69,34,-82,-25,27,-98, 
  /* [47][0][][] */ -119,-70,30,127,-49,-34,-4,83,-43,83,121,46,1,40,34,59, 
  /* [48][0][][] */ 29,6,-114,-82,18,-54,31,41,73,-110,18,7,-88,-14,-70,-127, 
  /* [49][0][][] */ 27,74,-23,2,22,6,87,83,-68,108,-12,7,-75,3,48,127, 
  /* [50][0][][] */ -9,-13,-3,24,-127,-2,-24,-28,63,4,34,32,-5,-40,1,13, 
  /* [51][0][][] */ -13,-31,16,-127,5,105,14,-67,33,30,2,-66,82,36,-48,-14, 
  /* [52][0][][] */ 57,4,-31,-127,125,-99,19,-70,15,-32,118,-95,74,-23,-69,80, 
  /* [53][0][][] */ -17,-34,77,-52,-67,-97,47,-127,23,63,-121,106,-5,10,2,-55, 
  /* [54][0][][] */ 90,30,73,17,-86,-70,-52,-127,25,43,14,32,-35,-77,89,-23, 
  /* [55][0][][] */ 47,-14,-72,59,-72,59,18,-51,26,127,54,42,26,-27,27,84, 
  /* [56][0][][] */ 83,-64,-113,37,-33,-1,36,100,78,52,97,8,13,-72,8,127, 
  /* [57][0][][] */ 68,48,44,-36,104,28,22,31,103,-59,38,127,15,-76,109,-20, 
  /* [58][0][][] */ 90,-75,-19,-83,-2,42,27,127,11,42,-34,20,10,41,95,26, 
  /* [59][0][][] */ -7,59,-4,-64,-27,-104,27,-21,32,47,-65,-52,-127,-70,33,-41, 
  /* [60][0][][] */ 15,-65,64,-13,-22,11,49,-101,65,127,21,115,-48,-68,12,-6, 
  /* [61][0][][] */ 78,23,39,8,-41,-127,12,-75,-76,-39,8,42,-26,-9,41,95, 
  /* [62][0][][] */ -43,49,-9,56,-22,127,-16,-1,-71,-16,-56,4,-3,11,27,-95, 
  /* [63][0][][] */ 60,20,-42,-104,-46,-76,111,-41,25,-127,-3,62,-64,102,7,-61, 
  /* [64][0][][] */ -6,-17,50,-62,96,-106,-5,55,-100,20,-118,-3,4,127,103,30, 
  /* [65][0][][] */ -85,-41,-1,-46,86,0,-66,-91,-127,-10,-24,-51,-60,115,-15,6, 
  /* [66][0][][] */ 3,68,-26,45,-21,127,-1,36,-35,0,-8,56,-44,26,25,-90, 
  /* [67][0][][] */ -15,8,-73,-61,-12,-52,95,-127,-37,-3,40,84,-93,-62,-55,-90, 
  /* [68][0][][] */ 41,-110,-61,50,-42,-28,57,127,13,11,92,43,-108,4,15,20, 
  /* [69][0][][] */ 42,99,99,-122,5,-31,-59,39,-9,112,9,32,37,-107,57,-127, 
  /* [70][0][][] */ 17,2,17,-9,59,27,-61,-64,-127,-96,19,18,-6,75,-109,15, 
  /* [71][0][][] */ -59,-108,-8,-81,33,25,76,-6,-121,43,-87,-84,-22,127,15,85, 
  /* [72][0][][] */ -19,45,86,-20,-81,-54,-127,-28,-37,90,-53,23,-7,66,-74,26, 
  /* [73][0][][] */ -22,-9,-36,-55,13,-75,48,-62,42,96,70,10,39,3,-82,127, 
  /* [74][0][][] */ 28,-21,-3,51,-52,-26,62,-2,95,80,3,127,94,-3,-31,-16, 
  /* [75][0][][] */ -59,74,-7,17,-84,127,3,47,-17,10,-68,74,-48,82,58,-56, 
  /* [76][0][][] */ -32,45,-73,11,-116,21,19,-6,68,10,-9,-10,67,-66,-127,7, 
  /* [77][0][][] */ 55,121,-127,65,94,93,92,7,2,-25,48,-64,97,61,17,52, 
  /* [78][0][][] */ -8,-11,-20,-72,39,-84,47,-66,21,20,127,-42,-15,-35,-56,124, 
  /* [79][0][][] */ -53,69,22,-1,18,-59,-10,-23,-127,14,24,-13,69,55,-46,-17, 
  /* [80][0][][] */ -90,-12,32,-30,23,8,-33,-127,-30,18,-82,-65,23,-101,-6,16, 
  /* [81][0][][] */ 53,89,-41,-26,5,-52,43,75,-118,88,-82,-60,-16,-4,78,127, 
  /* [82][0][][] */ 8,55,8,-24,24,-72,54,-111,54,50,-85,88,127,-48,87,-72, 
  /* [83][0][][] */ -20,-9,-7,1,27,53,-6,-127,42,-60,123,-11,11,-93,-80,-101, 
  /* [84][0][][] */ -127,-94,-58,-42,22,104,48,27,45,32,55,57,73,45,-90,-19, 
  /* [85][0][][] */ 60,33,46,-93,27,-35,-50,99,-17,126,-77,-23,-1,21,127,-15, 
  /* [86][0][][] */ -117,47,-68,30,67,127,-9,50,72,14,108,-56,3,101,20,6, 
  /* [87][0][][] */ 21,-64,35,-28,27,-127,36,-16,53,3,71,-21,18,-51,-23,51, 
  /* [88][0][][] */ -98,78,7,-33,124,5,3,47,-79,-89,116,-88,34,127,61,-79, 
  /* [89][0][][] */ -37,16,-28,41,-12,127,2,45,-56,-7,-52,3,-22,67,42,-58, 
  /* [90][0][][] */ 71,-94,48,46,83,-29,16,0,18,-55,-127,5,15,18,-25,0, 
  /* [91][0][][] */ -40,19,-50,-63,33,-94,-108,59,-94,50,-118,-127,-58,-33,28,45, 
  /* [92][0][][] */ 31,13,27,52,-127,-97,38,-17,-41,1,2,-51,-43,-42,45,21, 
  /* [93][0][][] */ -33,-127,-55,82,-64,-74,-44,58,106,84,35,22,-19,78,18,-54, 
  /* [94][0][][] */ 61,-15,127,-45,-4,-5,12,7,47,47,-26,23,-13,-19,124,-35, 
  /* [95][0][][] */ -35,-18,-70,-72,127,32,97,59,-2,-53,-94,-31,-18,-26,-127,79, 
};
const TfArray<96, float> quant19_scale = { 96, { 0.0049636447802186012, 0.0017964477883651853, 0.0065948022529482841, 0.0055443975143134594, 0.0032297288998961449, 0.0014197616837918758, 0.0037126955576241016, 0.0035937370266765356, 0.0019125317921862006, 0.0033468289766460657, 0.00092333037173375487, 0.0029730151873081923, 0.0036587277427315712, 0.0056672273203730583, 0.0025644081179052591, 0.0033710941206663847, 0.0026677264831960201, 0.0034733668435364962, 0.0029734026174992323, 0.0012148600071668625, 0.0059150699526071548, 0.0022302558645606041, 0.0034890910610556602, 0.0037558791227638721, 0.0014013395411893725, 0.0029768545646220446, 0.004686031024903059, 0.0047116922214627266, 0.0034266994334757328, 0.0048558306880295277, 0.0038810537662357092, 0.0030772085301578045, 0.0058056162670254707, 0.0012981225736439228, 0.0030679414048790932, 0.0031046024523675442, 0.0037201207596808672, 0.0050424374639987946, 0.0026059963274747133, 0.0040934677235782146, 0.0015638389158993959, 0.0042962413281202316, 0.0042830100283026695, 0.0033536821138113737, 0.003312000771984458, 0.002087457338348031, 0.0014695950085297227, 0.0022105411626398563, 0.0041330195963382721, 0.0034485070500522852, 0.0040563987568020821, 0.0030071521177887917, 0.0033632298000156879, 0.002039286307990551, 0.0021638369653373957, 0.0048490231856703758, 0.0030402906704694033, 0.0010260486742481589, 0.0033838164526969194, 0.0042977789416909218, 0.002040449995547533, 0.0022868760861456394, 0.0045966990292072296, 0.0036764848046004772, 0.001135876402258873, 0.0018379148095846176, 0.0057971407659351826, 0.0025443648919463158, 0.0021779458038508892, 0.0026746559888124466, 0.0045531406067311764, 0.0021482910960912704, 0.0035628851037472486, 0.0039142360910773277, 0.0047123911790549755, 0.0038910768926143646, 0.0042687458917498589, 0.0016976656625047326, 0.0030937395058572292, 0.0025836918503046036, 0.0037986990064382553, 0.0029484857805073261, 0.0027112364768981934, 0.00077349354978650808, 0.0036320765502750874, 0.0017545262817293406, 0.0017770094564184546, 0.0044279363937675953, 0.005657542496919632, 0.0056500132195651531, 0.003962335642427206, 0.0015247327974066138, 0.0032125862780958414, 0.0026630852371454239, 0.0018035690300166607, 0.0019128483254462481, } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data20[16] = { -4155, 12178, -17205, 1547, 11544, -17078, -36282, -7945, -4468, 6863, -14700, -14251, 5617, -10409, -3416, -2469, };
const TfArray<16, float> quant20_scale = { 16, { 0.00015545831411145627, 0.0001405409857397899, 0.00014273280976340175, 0.00018312927568331361, 0.0001026676909532398, 0.00014141995052341372, 0.00010734692477853969, 0.00018916980479843915, 0.00013033472350798547, 8.1052989116869867e-05, 0.00019793947285506874, 0.00015047735359985381, 0.00016056434833444655, 0.00012026915646856651, 0.00010689900227589533, 0.00013378119911067188, } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data21[16*1*1*48] = { 
  /* [0][0][][] */ 8,54,3,-49,82,81,-56,40,-31,127,20,60,-19,51,-31,27,48,94,57,-44,-83,57,-23,65,40,60,54,67,-62,-31,8,66,-43,-5,-52,34,64,-109,-17,0,-3,-16,44,-23,8,-70,-43,0, 
  /* [1][0][][] */ -40,19,-108,-33,-5,119,-81,39,4,-22,-67,21,84,-36,-14,-12,-15,-54,-23,5,-58,34,-101,-36,-76,-61,37,60,-45,-49,30,-31,30,-50,-22,76,32,-83,127,-58,-43,50,-35,0,21,76,18,5, 
  /* [2][0][][] */ -13,-12,67,-15,-31,-86,0,6,74,52,-43,-4,112,-58,127,57,-77,-4,-42,12,89,-85,-44,-70,-5,-17,47,-47,20,24,-22,-3,14,-9,68,21,-74,25,16,-40,13,41,43,-30,3,-91,99,-65, 
  /* [3][0][][] */ 21,-12,-36,-11,16,87,30,-2,25,-59,36,-37,-32,22,24,24,-55,-47,48,-127,6,-15,-39,-1,-52,68,100,73,4,-23,39,52,41,-13,101,17,-55,-37,16,22,10,-2,-29,15,36,33,-24,-36, 
  /* [4][0][][] */ 104,-25,-11,-61,61,92,26,-7,43,2,-110,44,55,-35,-3,-31,-104,-125,-40,-68,-36,38,-52,-46,-57,127,-108,88,-34,-31,7,89,17,-62,-3,-11,9,29,-41,42,-27,-26,-22,28,-61,75,-10,-31, 
  /* [5][0][][] */ 16,-20,-77,-9,-30,45,36,-13,85,74,28,85,43,-40,51,11,-58,127,-35,24,27,14,-58,-31,55,15,-86,-54,-32,17,5,-4,-27,-13,30,33,-35,-8,-109,20,113,-37,44,68,-3,24,-58,21, 
  /* [6][0][][] */ 35,30,-4,82,-14,-44,112,-30,-17,41,93,112,56,22,-64,72,54,-57,-88,60,24,-74,-58,34,-96,63,59,-26,120,65,-47,17,68,-38,-127,-25,109,49,-19,-17,31,35,32,-47,78,127,11,15, 
  /* [7][0][][] */ -100,10,-35,38,-39,-36,7,30,57,116,-35,-50,-102,-5,-29,-27,-56,74,16,120,-29,23,7,20,-31,-69,-43,-58,12,50,9,-7,-30,-4,27,-2,-10,-37,127,25,-9,24,7,-27,64,48,-12,13, 
  /* [8][0][][] */ 7,-62,28,-71,36,-35,45,-19,-7,-84,8,25,-45,19,9,41,-18,-11,-22,105,-13,48,-2,40,74,7,-37,-47,-127,-36,-64,-82,24,-72,-15,89,-22,12,78,31,30,-18,76,117,-25,-76,-54,85, 
  /* [9][0][][] */ 37,-53,4,-44,21,98,-19,66,-1,-53,-17,-34,38,-28,127,-34,-11,-94,19,23,-50,21,37,-55,-41,-94,-43,59,73,90,-21,-8,-67,49,10,105,-43,-24,-71,-42,-45,18,17,121,39,98,-83,-3, 
  /* [10][0][][] */ -23,5,-33,4,6,36,-46,-51,33,23,68,-18,-42,4,56,-56,-66,127,-12,32,13,-21,5,37,-50,28,-8,71,20,-6,-19,3,52,20,5,12,-20,-30,-22,7,-84,11,11,-1,4,52,15,18, 
  /* [11][0][][] */ -48,68,-5,23,49,46,-15,-7,36,35,-125,-62,95,5,-24,-33,14,45,-32,-35,-29,8,101,21,68,28,-3,52,-24,45,6,38,48,-21,-38,18,62,72,127,38,54,-49,87,-17,-77,-37,110,20, 
  /* [12][0][][] */ -73,-16,15,3,-70,-36,17,-13,-19,-45,-127,-1,48,-72,31,14,29,78,90,-121,-43,53,-24,-57,-16,-29,17,-43,-8,-1,-1,80,45,56,49,-45,-35,-10,14,-14,-14,29,39,11,17,1,-49,-47, 
  /* [13][0][][] */ -69,-122,-60,-72,-10,3,72,-8,-127,4,126,-76,69,58,92,-15,85,42,-25,-106,87,-90,86,21,-89,-13,-43,-8,-57,-69,-80,-4,22,-5,-46,36,8,-31,91,-87,-26,31,43,58,33,-6,75,-77, 
  /* [14][0][][] */ 57,3,-43,-15,-28,-2,-122,-9,-57,90,85,75,6,-95,-5,-74,81,-116,47,33,123,-91,7,14,-33,127,-124,24,-48,-12,-87,-18,127,71,124,-46,-75,34,-6,47,-38,-35,105,-51,-86,-32,-47,43, 
  /* [15][0][][] */ -71,26,50,32,99,17,-12,44,32,56,-29,35,63,-27,-45,-2,25,20,15,-20,39,-20,-30,-34,60,-71,-48,72,-15,-8,0,21,-40,14,127,9,-66,0,66,1,-27,-3,31,-16,-15,-43,4,-6, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant21_scale = { 16, { 0.0066069783642888069, 0.0059729916974902153, 0.0060661444440484047, 0.0077829938381910324, 0.004363376647233963, 0.0060103479772806168, 0.0045622442848980427, 0.0080397166311740875, 0.0055392258800566196, 0.0034447519574314356, 0.0084124272689223289, 0.0063952873460948467, 0.0068239844404160976, 0.0051114391535520554, 0.004543207585811615, 0.0056857005693018436, } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data22[48] = { 13713, -735, 14480, -482, 10200, -2143, 22472, 353, 8265, 28140, -98, 18109, -160, 8463, 32093, 24720, 76, 5493, 3079, 31367, 48, 14696, 1628, 13350, 14592, 30911, 3582, 2211, -2302, 13588, 14519, 214, 734, 602, -1712, 11319, 16024, 22829, 1296, 18418, 22113, 462, 1437, 11911, -158, 323, 26865, 21621, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 0.00010516957991058007, 0.00020277751900721341, 9.6625226433388889e-05, 0.00011457248911028728, 0.00013258037506602705, 9.1314759629312903e-05, 9.7306830866727978e-05, 0.00030764122493565083, 0.00014128994371276349, 7.920749339973554e-05, 6.3690735260024667e-05, 0.00011862489191116765, 9.1826696007046849e-05, 0.00011905191058758646, 5.9834324929397553e-05, 9.1794521722476929e-05, 0.00012935302220284939, 5.311897984938696e-05, 0.0001284251338802278, 7.0631103881169111e-05, 0.00011371894652256742, 9.5971379778347909e-05, 0.00010749167267931625, 0.00016325742763001472, 9.2566726380027831e-05, 7.6944168540649116e-05, 5.6204240536317229e-05, 4.8115423851413652e-05, 0.00024294167815241963, 8.836447523208335e-05, 7.0980713644530624e-05, 0.00053346739150583744, 0.00013934609887655824, 0.00013026405940763652, 0.00011508439638419077, 8.3944119978696108e-05, 8.5306208347901702e-05, 6.8103094235993922e-05, 0.0001051370200002566, 0.0001135409256676212, 7.5286981882527471e-05, 0.00019384516053833067, 0.00020335325098130852, 0.00010305441537639126, 0.00018819575780071318, 8.3888873632531613e-05, 8.3543309301603585e-05, 7.7487820817623287e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ -123,77,-127,109,-104,80,-64,-1,-30,-32,44,-63,29,-21,-88,-98,102,53,55,-57,36,-47,34,-39,-32,-71,96,73,-120,-7,-96,-29,84,-78,96,-119,-57,-117,56,-97,26,-43,118,-27,57,86,-87,-95, -67,35,-86,125,-26,127,-8,12,-127,-127,86,-82,127,-43,-111,-127,127,92,98,-72,55,-125,102,-127,-44,-46,50,127,-1,-118,-111,-12,49,-122,69,-54,-78,-127,127,-127,-46,106,127,-119,-53,127,-31,-33, -12,4,32,-9,21,22,-44,85,-12,0,19,2,72,-68,-67,-55,7,79,103,2,-4,-2,2,-66,-18,-7,-4,47,60,-74,-74,-48,54,-64,68,10,-90,-62,13,-92,-127,-57,63,-73,-32,81,16,-97, 
  /* [0][1][][] */ -127,97,-86,127,-23,59,-60,127,-47,-65,127,-91,52,-36,-127,-67,65,127,-83,-116,49,-51,54,-29,-47,-44,127,58,-90,-127,-40,-17,48,81,127,-127,-94,-45,72,-39,-55,-55,37,-123,127,95,-46,-127, -78,127,-114,79,-127,74,-127,25,-70,-99,124,-127,96,-127,-87,-102,94,118,-90,-127,127,-127,127,-59,-59,-127,101,123,46,-82,-127,127,127,18,106,-64,-123,-43,94,-88,-67,127,45,-127,-21,96,-127,-67, -27,85,-29,2,-8,-3,-72,-21,-77,-76,95,-68,21,-4,-90,-57,94,89,-76,-56,54,-76,61,-9,-127,-15,20,65,127,-101,-15,86,6,55,83,-2,-100,-51,76,-110,-8,-22,-17,-83,-46,96,15,-110, 
  /* [0][2][][] */ -75,61,30,73,-54,10,-71,81,-71,-7,59,-13,0,-4,3,-96,81,65,-38,17,48,-61,1,6,-79,-58,68,28,-43,-90,8,-45,0,103,77,-84,-111,1,2,-70,-120,-12,-12,-99,83,-2,-77,-85, -97,13,-28,20,-79,59,-23,90,-83,-87,84,-30,83,-13,-19,-16,38,82,-127,-49,50,-60,7,-68,-86,-21,80,53,32,-118,-10,86,4,127,91,-15,-127,2,55,-8,-84,81,-12,-30,-2,24,-80,-101, -60,57,-84,-20,6,25,4,76,-44,-46,55,1,55,18,16,-31,7,48,-29,-29,34,-32,-16,-40,-70,-40,-7,41,85,20,20,-57,-18,90,54,24,-58,33,-9,-67,-31,10,38,21,-16,5,-44,-82, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0044697071425616741, 0.0086180446669459343, 0.0041065718978643417, 0.0048693306744098663, 0.0056346659548580647, 0.0038808772806078196, 0.0041355402208864689, 0.013074751943349838, 0.0060048224404454231, 0.0033663182985037565, 0.0027068562339991331, 0.0050415578298270702, 0.0039026343729346991, 0.0050597060471773148, 0.00254295882768929, 0.0039012669585645199, 0.0054975035600364208, 0.0022575566545128822, 0.0054580681025981903, 0.0030018219258636236, 0.0048330551944673061, 0.0040787835605442524, 0.0045683961361646652, 0.0069384407252073288, 0.0039340858347713947, 0.0032701271120458841, 0.0023886801209300756, 0.0020449054427444935, 0.010325021110475063, 0.0037554900627583265, 0.003016680246219039, 0.022672362625598907, 0.0059222090058028698, 0.0055362223647534847, 0.0048910868354141712, 0.0035676250699907541, 0.0036255137529224157, 0.0028943812940269709, 0.0044683231972157955, 0.00482548912987113, 0.0031996967736631632, 0.0082384189590811729, 0.0086425133049488068, 0.004379812628030777, 0.0079983193427324295, 0.0035652772057801485, 0.0035505904816091061, 0.0032932322937995195, } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&g0::quant22_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data24[48] = { 2057, -1411, 788, -2133, 1847, -180, 4237, -3236, 1442, 899, 1922, 3829, 35, -748, 144, 2857, -1926, 3007, 3433, 801, -961, 2043, -1030, 5646, 2182, 1658, 481, -351, 5327, -506, 1276, -2808, -1021, 1850, -1146, 1826, 1663, 419, -39, 3510, 851, 3549, -3810, 1346, 3253, 445, 2022, 1229, };
const TfArray<48, float> quant24_scale = { 48, { 0.00025871786056086421, 0.00031386158661916852, 0.00040982206701301038, 0.00026294321287423372, 0.0003671267768368125, 0.00030249980045482516, 0.00019962394435424358, 0.00019970253924839199, 0.0002808617427945137, 0.00031571617000736296, 0.00026531057665124536, 0.00022805199841968715, 0.00049353280337527394, 0.0003086479555349797, 0.00046016401029191911, 0.00023726238578092307, 0.00028432765975594521, 0.00028605945408344269, 0.00022855879797134548, 0.00041764261550270021, 0.00034472774132154882, 0.0003164331428706646, 0.00026486589922569692, 0.0001593171909917146, 0.00025368778733536601, 0.00029931889730505645, 0.00046083290362730622, 0.00046786008169874549, 0.00015290731971617788, 0.00041228850022889674, 0.00028196087805554271, 0.00016185225103981793, 0.00025089402333833277, 0.00036580019514076412, 0.00029512323089875281, 0.00034297537058591843, 0.00032070826273411512, 0.00033336246269755065, 0.00030932234949432313, 0.00024733011377975345, 0.00048556816182099283, 0.00022173979959916323, 0.00017314315482508391, 0.00038724479964002967, 0.0002316719910595566, 0.0002752931322902441, 0.00032525125425308943, 0.00040450211963616312, } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ 92,12,110,-58,47,127,-59,-77, 
  /* [1][0][][] */ 27,-109,-127,21,73,43,19,18, 
  /* [2][0][][] */ -127,11,-58,-7,31,39,-79,-19, 
  /* [3][0][][] */ 61,51,107,-97,10,-127,-27,-34, 
  /* [4][0][][] */ -127,34,-60,-7,25,25,-21,-37, 
  /* [5][0][][] */ -127,45,-42,8,-9,60,-107,-120, 
  /* [6][0][][] */ -19,-115,-106,67,127,35,29,70, 
  /* [7][0][][] */ -38,-127,-100,-84,-45,-75,1,59, 
  /* [8][0][][] */ 74,56,12,17,127,-108,-121,35, 
  /* [9][0][][] */ -24,43,-78,84,-86,-29,127,-53, 
  /* [10][0][][] */ -35,127,46,71,97,-6,4,64, 
  /* [11][0][][] */ -55,-15,-5,7,-59,106,127,11, 
  /* [12][0][][] */ 73,18,-127,20,-21,-43,-46,-25, 
  /* [13][0][][] */ 93,-15,-101,-10,-5,-127,-55,-6, 
  /* [14][0][][] */ 28,-86,42,-13,127,-119,-75,-5, 
  /* [15][0][][] */ -24,-73,18,127,98,120,-65,56, 
  /* [16][0][][] */ 127,45,-16,34,58,-121,-106,-7, 
  /* [17][0][][] */ 43,127,61,53,29,45,11,-91, 
  /* [18][0][][] */ 18,-35,-18,-25,127,26,9,-36, 
  /* [19][0][][] */ 24,127,44,27,-91,31,37,-14, 
  /* [20][0][][] */ -25,38,87,-109,39,55,2,127, 
  /* [21][0][][] */ -13,82,16,-127,7,21,9,117, 
  /* [22][0][][] */ -82,-43,-68,34,-95,127,118,-4, 
  /* [23][0][][] */ 93,67,-127,0,-6,-79,-108,-45, 
  /* [24][0][][] */ -33,66,-14,27,1,59,-111,127, 
  /* [25][0][][] */ -73,-63,-127,-5,-64,-74,72,71, 
  /* [26][0][][] */ 27,6,-19,-15,110,2,127,-22, 
  /* [27][0][][] */ 127,-47,7,96,16,12,-32,69, 
  /* [28][0][][] */ 25,41,95,16,127,-39,94,-7, 
  /* [29][0][][] */ -30,6,-6,-54,-43,29,127,-12, 
  /* [30][0][][] */ 18,-100,-28,-45,-127,21,33,-29, 
  /* [31][0][][] */ 24,41,-21,-1,-127,-6,-41,0, 
  /* [32][0][][] */ 57,-41,-41,91,9,-102,127,-105, 
  /* [33][0][][] */ 65,127,60,51,26,5,0,1, 
  /* [34][0][][] */ -122,-46,127,-21,-35,107,68,27, 
  /* [35][0][][] */ -13,82,127,3,-41,-46,-19,9, 
  /* [36][0][][] */ -66,-12,68,-34,-32,127,83,5, 
  /* [37][0][][] */ -47,-73,14,-127,-75,-118,106,76, 
  /* [38][0][][] */ 37,-32,82,-79,75,51,-127,-5, 
  /* [39][0][][] */ -31,60,-127,-53,-37,-16,23,52, 
  /* [40][0][][] */ 45,-34,30,41,22,14,-6,127, 
  /* [41][0][][] */ -47,48,127,21,31,41,-81,-2, 
  /* [42][0][][] */ 36,-90,-124,-42,-127,27,36,-62, 
  /* [43][0][][] */ 10,-52,5,-75,127,-55,-4,51, 
  /* [44][0][][] */ -20,85,127,-6,28,71,-39,-17, 
  /* [45][0][][] */ -58,69,32,113,-116,51,-127,40, 
  /* [46][0][][] */ -22,-52,37,23,-127,-88,-45,-19, 
  /* [47][0][][] */ 2,69,20,-69,-127,52,-35,71, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.0022604372352361679, 0.0027422320563346148, 0.0035806461237370968, 0.0022973546292632818, 0.003207614179700613, 0.0026429633144289255, 0.0017441293457522988, 0.0017448159633204341, 0.0024539099540561438, 0.0027584359049797058, 0.002318038372322917, 0.0019925073720514774, 0.0043120328336954117, 0.0026966803707182407, 0.0040204874239861965, 0.0020729792304337025, 0.0024841921404004097, 0.0024993228726089001, 0.0019969353452324867, 0.0036489746998995543, 0.0030119121074676514, 0.0027646999806165695, 0.0023141531273722649, 0.0013919662451371551, 0.0022164892870932817, 0.0026151714846491814, 0.0040263314731419086, 0.0040877284482121468, 0.001335962675511837, 0.003602195531129837, 0.0024635132867842913, 0.001414115191437304, 0.0021920797880738974, 0.0031960236374288797, 0.0025785136967897415, 0.0029966013971716166, 0.0028020520694553852, 0.0029126128647476435, 0.0027025726158171892, 0.0021609417162835598, 0.0042424453422427177, 0.0019373572431504726, 0.0015127647202461958, 0.0033833866473287344, 0.0020241355523467064, 0.0024052567314356565, 0.0028417445719242096, 0.0035341652110219002, } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data26[8] = { 2883, 116, 25389, -4808, 5573, -13152, 2005, -14783, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 7.9347773862536997e-05, 0.00012517356663011014, 0.00014282546180766076, 0.00010432378621771932, 0.00010853575076907873, 0.0001656974054640159, 0.00010642773122526705, 7.8981858678162098e-05, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -63,-69,0,-46,-19,-34,69,105,-119,-108,-57,-13,-76,15,-82,55,-104,-9,-6,111,79,-7,-6,76,51,95,46,-17,-72,-76,-60,-38,-32,80,53,-29,9,-52,113,14,45,26,21,-127,20,-14,-53,-105, 
  /* [1][0][][] */ -27,32,-2,-38,-48,38,-3,-57,-45,77,-31,1,35,54,-28,-20,-33,-91,53,-59,127,-7,-70,36,36,-17,-87,41,19,-27,75,45,-43,-31,16,-25,-13,80,-22,-38,72,23,9,27,78,-2,-42,36, 
  /* [2][0][][] */ -12,-53,110,19,78,-32,2,39,-51,-16,2,35,24,-62,-36,-127,-42,-123,-41,3,-121,9,-29,-23,-38,34,13,-66,-30,22,-21,1,14,-20,44,10,14,-48,-39,-6,24,-20,19,-36,-33,-63,-84,-39, 
  /* [3][0][][] */ 29,-3,42,-6,-1,-48,14,49,-68,-7,59,-40,-80,73,2,30,45,46,-50,12,-119,-45,101,-19,25,-15,-36,-48,-65,43,127,-78,-11,-88,-3,23,-29,-92,6,86,-53,-71,76,16,-108,-85,72,-25, 
  /* [4][0][][] */ 5,-35,95,-17,21,4,10,11,-80,7,-12,22,65,-95,59,-124,63,36,-24,-23,-2,51,5,-5,15,17,79,-3,44,11,-127,0,-44,-9,-9,32,69,11,25,16,-58,2,-63,17,-3,-124,-13,8, 
  /* [5][0][][] */ 36,-30,67,14,42,3,8,14,-54,6,-29,13,41,-6,-1,-26,70,78,10,-26,90,-67,127,-66,-1,27,-11,55,-4,23,-41,-55,-3,-27,-20,-4,24,37,74,17,-55,12,16,38,30,-2,82,11, 
  /* [6][0][][] */ -60,67,-99,62,65,1,18,36,-2,-26,39,-55,-71,-35,-44,45,-89,46,10,68,39,61,-63,-101,-24,-1,6,89,-11,-17,-59,-9,18,86,-61,-42,-32,12,93,22,47,42,-94,-69,-15,127,-32,-52, 
  /* [7][0][][] */ 13,95,-59,38,-5,40,100,53,65,56,-120,-24,-22,-19,-49,-67,53,17,97,125,62,-17,105,47,127,120,-72,77,-92,54,-22,-97,-3,-87,-1,45,-20,78,-85,104,-41,27,-27,-60,102,-43,31,-57, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.0033722803927958012, 0.0053198765963315964, 0.0060700820758938789, 0.0044337608851492405, 0.004612769465893507, 0.0070421393029391766, 0.0045231785625219345, 0.0033567289356142282, } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&g0::quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data28[48] = { -383, 9828, -114, -871, 726, -1647, 1567, -921, -5007, 597, -8157, -203, 300, -715, -2861, 4954, 5948, 2466, -333, -4902, -7627, -84, 11213, -5817, -1039, -1228, 3795, -5123, 146, 122, -11477, 6006, 8516, 697, 4129, 180, 38, -781, 9933, 564, 6554, -2623, 2659, 5403, -582, 5747, -290, -257, };
const TfArray<48, float> quant28_scale = { 48, { 0.00027120785671286285, 0.00017006299458444118, 0.00077717890962958336, 0.00016940149362199008, 0.00023665218031965196, 0.00027256523026153445, 0.00025873043341562152, 0.00045356250484474003, 0.00011419125075917691, 0.0002096515818266198, 0.00018668148550204933, 0.0013207043521106243, 0.00048788540880195796, 0.00072825542883947492, 0.00030658373725600541, 0.0005179409054107964, 0.00018332844774704427, 5.7424094848101959e-05, 0.00030267753754742444, 0.00028484428185038269, 0.00027231560670770705, 0.00030792134930379689, 0.00012349504686426371, 0.000376732466975227, 0.00020564276201184839, 0.00032330234535038471, 0.00062939542112872005, 0.0002763315278571099, 0.00032828576513566077, 0.00042706221574917436, 0.00010309591016266495, 0.00017882647807709873, 9.0875044406857342e-05, 0.00016172428149729967, 0.0001626367011340335, 0.00039277345058508217, 0.0025739129632711411, 0.00032933198963291943, 0.00014558676048181951, 0.00025589557480998337, 0.0001725677284412086, 0.00014524343714583665, 0.00024447072064504027, 0.00021545952768065035, 0.00026063370751217008, 0.00013946813123766333, 9.1902940766885877e-05, 0.000186619145097211, } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ 31,-73,1,-10,-32,-120,-58,69,-11,-28,32,-3,29,10,2,-6,101,-13,41,24,-21,-42,-79,8,-29,-33,17,-45,-34,84,11,-114,104,-24,-22,-24,-19,-17,-11,19,-32,52,34,25,-34,31,127,8, -118,-127,-33,127,-47,100,-108,127,4,-5,56,-14,79,32,14,-56,-45,46,43,29,28,127,-9,127,127,-50,-19,56,76,-127,18,-26,127,15,-70,-127,12,33,-43,-73,-127,-24,-127,-82,21,65,65,127, 7,-33,4,-7,-10,-2,14,7,32,-64,-29,-8,-3,13,12,-4,-31,84,-35,-10,13,-47,127,10,-18,-13,28,-22,34,17,42,39,35,-35,-67,41,-4,-17,39,24,4,-39,54,-7,9,7,1,-42, 
  /* [0][1][][] */ 8,8,-38,-18,41,-127,94,-32,12,-11,65,23,122,1,17,-47,-1,-3,44,29,51,-36,16,-1,-75,127,-82,-37,127,-67,28,-127,-18,-13,-111,36,-1,-50,-27,37,84,127,34,-127,-94,-25,16,100, 127,-105,127,-17,127,34,-84,-10,4,127,127,-127,-127,127,127,127,127,127,80,127,127,120,-16,-10,121,-95,-127,127,52,96,127,29,-127,127,99,83,-127,127,-127,-127,16,11,-123,-8,127,-127,9,99, 2,2,-50,-22,-33,82,-127,100,127,-65,58,46,-63,24,30,-81,33,48,-127,-3,45,-75,-13,-17,33,-31,-1,80,-44,-50,59,-57,0,0,127,-42,25,-26,18,-101,77,-20,60,60,-47,97,100,-43, 
  /* [0][2][][] */ -27,55,-2,-52,13,-91,-35,24,-18,22,38,-8,-39,2,-19,-13,-25,55,29,-21,19,-42,52,-25,-61,-12,55,-41,30,18,-26,-2,-52,-31,-38,49,-11,-34,42,70,-41,-22,35,28,-40,38,8,34, 64,10,-45,-58,9,0,85,-46,100,-60,31,18,-103,-5,-41,-88,3,101,27,8,31,47,-3,-49,-37,83,87,19,-61,-5,-66,22,-68,-22,-68,-20,40,-47,21,66,-118,-23,11,70,57,23,26,-82, -31,-3,-4,-5,-1,-35,-27,-67,0,-3,26,-6,41,3,-29,4,57,84,-2,-41,15,2,-24,-29,-9,-44,41,11,5,-16,-40,43,-1,2,3,-66,-17,26,54,42,-26,8,32,34,0,35,71,-18, 
};
const TfArray<48, float> quant29_scale = { 48, { 0.011526334099471569, 0.0072276769205927849, 0.033030103892087936, 0.0071995635516941547, 0.010057717561721802, 0.011584022082388401, 0.010996042750775814, 0.019276406615972519, 0.0048531279899179935, 0.0089101921766996384, 0.0079339630901813507, 0.056129936128854752, 0.020735129714012146, 0.03095085546374321, 0.013029809109866619, 0.022012488916516304, 0.0077914590947329998, 0.0024405240546911955, 0.012863795273005962, 0.012105881236493587, 0.011573412455618382, 0.013086657039821148, 0.0052485391497612, 0.016011130064725876, 0.0087398169562220573, 0.013740349560976028, 0.026749305427074432, 0.011744089424610138, 0.013952144421637058, 0.018150143325328827, 0.0043815760873258114, 0.0076001249253749847, 0.0038621893618255854, 0.0068732821382582188, 0.0069120596162974834, 0.016692871227860451, 0.10939129441976547, 0.0139966094866395, 0.0061874371021986008, 0.010875562205910683, 0.0073341280221939087, 0.0061728460714221001, 0.010390006005764008, 0.0091570299118757248, 0.011076931841671467, 0.0059273955412209034, 0.0039058749098330736, 0.0079313134774565697, } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&g0::quant22_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data30[48] = { 1399, 4799, 16859, 1704, 1281, -814, 8785, 24271, 2292, -287, 2284, -1730, 27183, -2339, 2043, 9769, -27, 1155, -201, 1608, 2496, 4623, 198, 43832, 3540, 2157, 8354, 857, 3556, 5284, 662, 1466, 306, 1974, -741, -57, -1684, -993, 2699, 3028, 4267, 2127, 2247, 2657, 5483, 4894, 1482, 4701, };
const TfArray<48, float> quant30_scale = { 48, { 0.00036224815994501114, 0.00019222979608457536, 6.3527651946060359e-05, 0.0002294877776876092, 0.00031795079121366143, 0.00037182820960879326, 0.00010146024578716606, 4.3960331822745502e-05, 0.00020763184875249863, 0.0003394687082618475, 0.00031306824530474842, 0.00022226310102269053, 3.966449003200978e-05, 0.00023031145974528044, 0.00027564307674765587, 9.7362491942476481e-05, 0.00035787501838058233, 0.0002900392864830792, 0.00030303956009447575, 0.00031523857614956796, 0.00024393538478761911, 0.00018217104661744088, 0.00039864395512267947, 2.7373389457352459e-05, 0.00021119993471074849, 0.00022054437431506813, 0.0001102775931940414, 0.00035522138932719827, 0.00019234506180509925, 0.00016251819033641368, 0.00057669653324410319, 0.00035774140269495547, 0.00032580294646322727, 0.0002423693222226575, 0.00023915758356451988, 0.00044153668568469584, 0.00028207807918079197, 0.00025078497128561139, 0.00025297736283391714, 0.00020789734844584018, 0.00020651656086556613, 0.00028352253139019012, 0.00031510571716353297, 0.00026789589901454747, 0.0001538216311018914, 0.00016528202104382217, 0.00050397991435602307, 0.00015448567864950746, } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ 26,127,-39,-48,-14,94,37,80, 
  /* [1][0][][] */ 68,-83,21,-127,-30,43,-54,-55, 
  /* [2][0][][] */ -6,127,82,23,112,22,25,-11, 
  /* [3][0][][] */ 109,57,-56,74,17,-63,-127,-51, 
  /* [4][0][][] */ -58,3,-12,-79,-7,70,127,18, 
  /* [5][0][][] */ 40,84,-127,-44,17,53,7,-46, 
  /* [6][0][][] */ 23,127,115,106,63,-20,-12,-83, 
  /* [7][0][][] */ 95,7,-7,1,-4,29,127,41, 
  /* [8][0][][] */ 64,127,30,98,71,43,56,-45, 
  /* [9][0][][] */ 18,127,-86,-53,-16,113,32,35, 
  /* [10][0][][] */ -77,-22,36,-28,-20,-42,-59,127, 
  /* [11][0][][] */ -3,-107,-127,-42,47,-37,67,11, 
  /* [12][0][][] */ -54,-127,-78,-57,-81,56,-27,71, 
  /* [13][0][][] */ 7,-6,-127,127,-122,-44,-15,-35, 
  /* [14][0][][] */ -72,-53,-127,8,17,-17,-26,-37, 
  /* [15][0][][] */ -1,-104,-127,-7,-65,-3,-6,-31, 
  /* [16][0][][] */ 116,-91,-40,52,-110,47,54,127, 
  /* [17][0][][] */ -6,84,127,-6,-26,7,-8,-2, 
  /* [18][0][][] */ 36,-127,81,109,22,-51,85,-75, 
  /* [19][0][][] */ 127,-23,-34,49,-70,-10,20,74, 
  /* [20][0][][] */ -17,-127,104,96,-31,-82,-15,-68, 
  /* [21][0][][] */ 17,-83,-38,-64,127,17,28,0, 
  /* [22][0][][] */ -120,52,-112,77,77,84,-127,-98, 
  /* [23][0][][] */ -101,-65,31,-27,-113,83,127,-64, 
  /* [24][0][][] */ -50,73,22,-12,-59,127,79,-24, 
  /* [25][0][][] */ -21,-69,-127,-71,-22,-35,-43,-57, 
  /* [26][0][][] */ -39,44,-44,111,-127,13,-85,-27, 
  /* [27][0][][] */ -1,-101,45,85,-2,-34,-10,-127, 
  /* [28][0][][] */ 38,127,26,60,117,6,-3,-29, 
  /* [29][0][][] */ 54,51,-1,-36,92,-127,-55,57, 
  /* [30][0][][] */ 8,-20,15,-127,2,-35,1,-7, 
  /* [31][0][][] */ 36,-27,23,93,-34,15,-5,127, 
  /* [32][0][][] */ -43,-30,-15,-75,-76,127,27,47, 
  /* [33][0][][] */ -12,22,26,-17,56,101,-127,50, 
  /* [34][0][][] */ 70,127,-125,-95,57,26,-117,47, 
  /* [35][0][][] */ 30,-127,8,65,-38,-70,14,-83, 
  /* [36][0][][] */ 3,-11,-51,11,-127,-66,-32,27, 
  /* [37][0][][] */ -37,-127,111,125,-29,-82,10,-86, 
  /* [38][0][][] */ -49,5,41,-78,-127,-93,-37,60, 
  /* [39][0][][] */ 43,-107,127,84,21,-51,14,-56, 
  /* [40][0][][] */ 18,69,2,23,-127,-28,-69,-1, 
  /* [41][0][][] */ 111,127,-48,-74,26,39,-23,33, 
  /* [42][0][][] */ -24,-21,0,-2,127,24,55,31, 
  /* [43][0][][] */ 127,38,89,35,-46,-5,72,77, 
  /* [44][0][][] */ 86,64,4,37,39,-127,-92,-5, 
  /* [45][0][][] */ 80,40,48,47,119,-127,20,-84, 
  /* [46][0][][] */ 37,-19,7,127,20,65,3,50, 
  /* [47][0][][] */ -125,-127,18,112,-89,-13,114,-54, 
};
const TfArray<48, float> quant31_scale = { 48, { 0.0046270652674138546, 0.0024553881958127022, 0.00081145088188350201, 0.0029312914703041315, 0.0040612467564642429, 0.0047494331374764442, 0.0012959712184965611, 0.00056151376338675618, 0.0026521214749664068, 0.0043360991403460503, 0.0039988807402551174, 0.0028390092775225639, 0.00050664215814322233, 0.0029418126214295626, 0.0035208419431000948, 0.0012436298420652747, 0.0045712064020335674, 0.0037047276273369789, 0.0038707824423909187, 0.0040266029536724091, 0.0031158335041254759, 0.0023269057273864746, 0.0050919558852910995, 0.0003496455610729754, 0.0026976973749697208, 0.0028170556761324406, 0.0014085968723520637, 0.0045373109169304371, 0.0024568603839725256, 0.0020758761093020439, 0.0073662558570504189, 0.0045694997534155846, 0.0041615436784923077, 0.0030958298593759537, 0.0030548057984560728, 0.0056398329325020313, 0.0036030376795679331, 0.0032033247407525778, 0.003231328446418047, 0.0026555128861218691, 0.0026378757320344448, 0.003621487645432353, 0.0040249060839414597, 0.0034218858927488327, 0.0019647933077067137, 0.0021111790556460619, 0.006437432486563921, 0.0019732753280550241, } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data32[8] = { 8082, 13682, -4004, 8030, -703, 3659, -10924, -19569, };
const TfArray<8, float> quant32_scale = { 8, { 0.00022842761245556176, 0.00012591920676641166, 0.00014352019934449345, 0.0001404569047736004, 0.00018974042905028909, 0.00018929751240648329, 0.00022091841674409807, 0.00011829361756099388, } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&g0::quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -59,-14,24,2,-25,-5,1,20,-35,4,-80,-71,-16,-80,-22,-23,61,-54,53,35,-28,24,-52,26,-10,-53,70,-26,6,-9,8,22,78,49,51,-127,30,9,-29,-48,14,-29,58,62,49,16,41,13, 
  /* [1][0][][] */ -12,48,71,-11,-24,52,-32,-14,-11,8,-1,-95,-3,93,-28,39,-4,5,-36,-63,23,-58,-11,7,-52,-24,-15,-90,-36,-28,42,-35,57,84,-23,-10,127,-41,15,57,-14,48,-87,-40,90,-5,-43,-36, 
  /* [2][0][][] */ -15,-31,-44,24,9,28,35,15,-19,26,9,36,46,-71,4,-44,43,-92,9,19,-10,35,-16,35,-27,43,-33,-75,3,15,29,-76,-30,-91,44,-39,84,31,2,-64,-13,38,59,13,127,26,30,34, 
  /* [3][0][][] */ 8,14,-59,31,0,-28,-64,-126,26,-39,-26,13,18,42,23,72,-21,30,-27,14,-8,-95,18,-50,-67,4,127,-28,-62,-11,-87,6,-13,-74,-2,-28,-9,-31,-39,127,-63,-54,13,34,56,-10,-29,60, 
  /* [4][0][][] */ -16,-34,3,16,19,-18,-2,1,34,-37,62,-64,-3,36,-1,18,-6,-31,19,-21,5,-57,13,-27,25,0,29,36,39,28,-6,17,-1,7,11,-10,-72,68,24,-32,36,-10,-27,-31,-62,19,127,18, 
  /* [5][0][][] */ 29,-31,-9,24,35,-27,18,-127,35,-15,2,95,-61,72,32,-48,11,-93,25,-9,-21,48,-44,-31,-42,81,-11,-9,-8,56,-51,-43,13,37,43,7,-25,4,-30,-49,27,-24,-30,4,-20,39,92,29, 
  /* [6][0][][] */ 57,-29,29,-1,-42,-9,-43,9,-28,15,-47,127,-30,-25,-13,62,1,33,23,40,25,-85,-10,8,30,46,-51,-4,-1,-30,21,26,-4,6,-5,7,20,9,-12,5,-17,-5,47,62,7,-43,77,-5, 
  /* [7][0][][] */ -42,19,-22,54,20,48,20,45,38,-9,58,-18,114,97,79,37,32,63,-29,17,38,-7,-105,-13,30,-18,-44,81,49,-42,-49,-4,23,21,29,-114,-63,54,55,44,-48,22,74,117,-76,-13,-127,78, 
};
const TfArray<8, float> quant33_scale = { 8, { 0.0097081735730171204, 0.00535156624391675, 0.0060996082611382008, 0.0059694182127714157, 0.0080639682710170746, 0.0080451443791389465, 0.0093890326097607613, 0.0050274785608053207, } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&g0::quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data34[48] = { 13396, 5040, 3398, -916, 1037, -2284, 969, 43676, -1001, 2318, 9200, 39196, 706, 306, -474, 9264, -2276, 11136, -507, 6870, 9331, -30, 3073, -8059, 12098, 50, 3273, 10005, 792, -1130, -7783, 8011, 3157, 1111, -622, 4332, -8690, 12081, -386, 20051, 562, -200, 6247, -1147, 2491, -1084, -197, 30, };
const TfArray<48, float> quant34_scale = { 48, { 9.7288924735039473e-05, 0.00015515492123086005, 0.00020338168542366475, 0.00014120883133728057, 0.00048959499690681696, 9.9650584161281586e-05, 0.00012955028796568513, 7.0441237767226994e-05, 0.00013062122161500156, 8.2501639553811401e-05, 6.9527181040029973e-05, 8.2728234701789916e-05, 8.9230336016044021e-05, 7.398558227578178e-05, 0.0002358972851652652, 0.00016184429114218801, 0.00013096646580379456, 0.00045112025691196322, 0.00016526655235793442, 0.00018368767632637173, 0.00016012693231459707, 0.00054638634901493788, 0.00021508733334485441, 0.00027033206424675882, 0.0001140253953053616, 0.00012556283036246896, 5.6461707572452724e-05, 0.00010907986870734021, 0.0001624489959795028, 0.001158872852101922, 0.00030151466489769518, 9.6465650130994618e-05, 0.00013414064596872777, 0.00017703360936138779, 0.00016645310097374022, 6.9120367697905749e-05, 0.00013134238542988896, 4.4910655560670421e-05, 0.00015143805649131536, 7.5257812568452209e-05, 0.00017647429194767028, 0.00012757220247294754, 5.6672630307730287e-05, 0.00013648161257151514, 8.6208514403551817e-05, 0.00032485919655300677, 6.9447880377992988e-05, 0.00025627421564422548, } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -91,-107,14,-49,113,-101,100,-39,-96,-89,3,-10,78,17,24,-127,103,-39,27,-6,-20,10,28,32,11,127,86,-3,111,-42,35,-61,-50,-46,76,81,-6,40,72,-105,-103,-43,9,36,60,-127,127,36, -99,-59,-38,17,-66,101,22,-120,-81,57,43,-111,91,127,58,-34,-65,-89,60,-17,-21,4,-78,74,-95,70,57,-74,127,-59,-19,-124,-68,-47,111,127,127,69,86,-103,-106,-95,49,95,49,76,78,30, 48,-10,-29,58,-23,-67,57,-42,44,-3,68,-82,-7,85,-59,-32,-127,-32,58,-1,17,-49,-30,20,-30,90,44,-95,3,65,127,-30,-20,33,9,20,44,79,75,-34,4,66,43,3,12,6,-9,-119, 
  /* [0][1][][] */ -71,-37,12,-43,-118,-124,127,-108,-127,-127,50,-35,111,30,-69,-35,119,-127,-45,-34,-100,17,-5,28,14,60,127,-15,-80,-83,23,-68,-40,-127,-127,36,61,96,-25,-127,87,-43,125,72,48,75,114,-127, -74,-127,-127,-127,-4,127,87,-127,45,33,127,-127,127,120,24,-122,34,-61,-117,-127,-127,127,-127,127,-127,96,94,-127,-103,127,-36,-127,-127,-65,32,84,91,127,-43,-97,127,-127,126,127,127,-20,121,114, -93,-82,-121,90,108,-88,78,-66,26,1,37,-21,-16,46,88,-16,-52,22,5,-29,-78,-47,-86,8,-63,94,51,-95,-86,50,86,-43,-75,32,94,42,99,83,-55,1,71,101,61,-6,24,-60,50,-9, 
  /* [0][2][][] */ -56,-54,41,48,-21,-66,-14,-90,46,-58,35,-5,-23,48,-6,-39,-126,-37,127,-52,-45,-31,-21,10,23,98,94,-37,4,33,17,23,-26,-44,-26,10,-13,-17,-85,-76,46,-32,77,11,2,28,43,-79, -127,-64,-51,-95,127,20,17,-38,49,-1,-12,-73,-27,73,-127,-89,14,-11,76,-80,5,-34,-18,67,-77,105,39,-4,69,-12,0,-2,-81,4,-101,25,3,-12,-127,-38,50,-70,127,35,55,-111,53,29, 17,12,-64,-48,1,16,48,-62,-81,-10,8,13,-34,40,57,-49,70,14,21,-65,11,-60,16,-1,-68,48,44,-44,-23,-38,23,7,-34,40,-1,16,44,38,-80,2,-27,22,-4,40,-6,-22,32,2, 
};
const TfArray<48, float> quant35_scale = { 48, { 0.004134779330343008, 0.0065940837375819683, 0.008643721230328083, 0.0060013751499354839, 0.020807787775993347, 0.0042351498268544674, 0.0055058868601918221, 0.0029937524814158678, 0.0055514015257358551, 0.003506319597363472, 0.002954905154183507, 0.0035159499384462833, 0.0037922891788184643, 0.0031443871557712555, 0.010025634430348873, 0.0068783825263381004, 0.0055660749785602093, 0.019172610715031624, 0.0070238281041383743, 0.0078067262656986713, 0.0068053943105041981, 0.023221418261528015, 0.0091412113979458809, 0.011489111930131912, 0.0048460792750120163, 0.0053364201448857784, 0.0023996224626898766, 0.0046358942054212093, 0.0069040819071233273, 0.049252092838287354, 0.012814372777938843, 0.0040997900068759918, 0.0057009770534932613, 0.0075239283032715321, 0.0070742564275860786, 0.0029376156162470579, 0.0055820513516664505, 0.0019087027758359909, 0.0064361174590885639, 0.0031984569504857063, 0.0075001572258770466, 0.005421818234026432, 0.0024085866753011942, 0.0058004683814942837, 0.0036638618912547827, 0.013806515373289585, 0.0029515349306166172, 0.010891653597354889, } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&g0::quant22_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data36[48] = { 2281, -1603, -121, 2664, 11702, 3349, -1200, 6031, 2784, 1690, -124, 3851, 3905, 546, -1949, 218, 6259, 28643, 3368, -637, 1222, -3738, -674, 4026, -1263, -1037, 3723, -380, 3509, 55827, 4178, -285, 1127, 196, 3884, 409, 2236, -733, 2725, 1330, 2594, 2427, -178, -135, 2542, 4088, 3912, 177, };
const TfArray<48, float> quant36_scale = { 48, { 0.00026695054839365184, 0.00018129977979697287, 0.00022951421851757914, 0.00018463458400219679, 7.6309326686896384e-05, 0.0002150119689758867, 0.00029596631065942347, 0.00013177563960198313, 0.00019259133841842413, 0.00033926899777725339, 0.0001889424747787416, 0.00020600979041773826, 8.9217741333413869e-05, 0.00018021166033577174, 0.00019669318862725049, 0.00019709554908331484, 0.00013333430979400873, 3.6225683288648725e-05, 0.00019737597904168069, 0.00024414312792941928, 0.0002814368053805083, 9.5154020527843386e-05, 0.00021366223518270999, 0.00016082766524050385, 0.00018057691340800375, 0.00041973768384195864, 0.00016721569409128278, 0.0003420650027692318, 0.00020018903887830675, 1.9394283299334347e-05, 0.0001509237481513992, 0.00042023145942948759, 0.00024447424220852554, 0.00027141292230226099, 0.0001640800473978743, 0.00024019369448069483, 0.00013400445459410548, 0.00029988912865519524, 0.00019615389464888722, 0.0003759854007512331, 0.00017628267232794315, 0.00022915862791705877, 0.00018556030408944935, 0.00030021395650692284, 0.00015076692216098309, 0.0001490677532274276, 0.00011728947720257565, 0.00022971912403590977, } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ -18,9,19,-31,-53,-14,-127,11, 
  /* [1][0][][] */ 126,-118,-93,-38,127,-80,90,4, 
  /* [2][0][][] */ -72,124,-25,-127,62,-36,-5,19, 
  /* [3][0][][] */ 18,42,102,-17,56,75,127,-34, 
  /* [4][0][][] */ -34,-127,29,30,-70,-66,27,-4, 
  /* [5][0][][] */ 127,-2,76,74,-42,-27,-18,-1, 
  /* [6][0][][] */ 11,21,127,-36,51,-22,-50,37, 
  /* [7][0][][] */ 49,-10,-124,-21,-64,91,127,-102, 
  /* [8][0][][] */ -24,127,-6,-13,30,108,16,68, 
  /* [9][0][][] */ 26,75,-22,44,-19,-127,68,70, 
  /* [10][0][][] */ -15,-95,15,-44,-52,-127,-32,-92, 
  /* [11][0][][] */ -113,-64,127,33,10,-84,85,48, 
  /* [12][0][][] */ -57,77,-127,72,65,-41,-112,92, 
  /* [13][0][][] */ 120,-127,122,72,-8,21,59,-50, 
  /* [14][0][][] */ 1,53,-7,-127,1,-114,-45,-75, 
  /* [15][0][][] */ 21,114,43,-29,47,-72,71,-127, 
  /* [16][0][][] */ -127,-87,-27,56,-73,46,9,94, 
  /* [17][0][][] */ -3,-127,-97,103,-37,91,-70,48, 
  /* [18][0][][] */ -102,-84,-64,53,15,36,-25,127, 
  /* [19][0][][] */ 35,-89,106,-127,28,-75,9,-46, 
  /* [20][0][][] */ 15,45,10,29,18,127,46,-28, 
  /* [21][0][][] */ 16,127,35,-22,52,-57,107,-117, 
  /* [22][0][][] */ 41,-5,127,38,-28,117,16,-56, 
  /* [23][0][][] */ -79,-44,62,-100,119,127,-89,-105, 
  /* [24][0][][] */ -127,-120,14,-115,91,89,-72,-111, 
  /* [25][0][][] */ 127,23,-53,-3,28,24,-80,-21, 
  /* [26][0][][] */ -101,-47,-127,-8,-33,-41,4,-16, 
  /* [27][0][][] */ 56,43,-16,-66,-127,-8,64,94, 
  /* [28][0][][] */ -127,-93,-19,65,-39,-108,28,25, 
  /* [29][0][][] */ 123,58,10,-127,-2,34,-28,-52, 
  /* [30][0][][] */ -126,-103,18,-51,58,127,-86,-116, 
  /* [31][0][][] */ 30,53,-18,127,17,-52,-6,22, 
  /* [32][0][][] */ -10,127,9,47,35,76,-29,28, 
  /* [33][0][][] */ -16,127,-50,7,35,-44,-6,-15, 
  /* [34][0][][] */ -87,-127,-18,120,-38,38,46,66, 
  /* [35][0][][] */ -33,127,-41,-18,76,82,62,48, 
  /* [36][0][][] */ 52,7,22,-67,-110,-10,127,91, 
  /* [37][0][][] */ -85,94,45,40,-112,127,-43,-82, 
  /* [38][0][][] */ 58,60,54,-2,101,49,127,30, 
  /* [39][0][][] */ -36,-75,18,-31,-5,49,-69,127, 
  /* [40][0][][] */ -114,-98,-59,127,-65,-27,-15,55, 
  /* [41][0][][] */ 100,36,32,127,-23,14,-29,-45, 
  /* [42][0][][] */ -67,-8,-100,-127,44,-103,-13,115, 
  /* [43][0][][] */ 10,7,65,8,45,127,69,19, 
  /* [44][0][][] */ -48,-47,-62,127,67,28,-60,-60, 
  /* [45][0][][] */ 27,127,62,-120,66,-21,-10,-67, 
  /* [46][0][][] */ -21,-127,-68,58,-29,27,-96,123, 
  /* [47][0][][] */ 58,12,127,27,52,125,79,-44, 
};
const TfArray<48, float> quant37_scale = { 48, { 0.0048466655425727367, 0.0032916185446083546, 0.004166983999311924, 0.0033521642908453941, 0.0013854467542842031, 0.0039036860689520836, 0.0053734662942588329, 0.0023924747947603464, 0.0034966242965310812, 0.0061596552841365337, 0.003430376760661602, 0.0037402452435344458, 0.0016198076773434877, 0.0032718630973249674, 0.0035710963420569897, 0.0035784014035016298, 0.002420773496851325, 0.00065770145738497376, 0.003583492711186409, 0.0044325818307697773, 0.0051096733659505844, 0.0017275848658755422, 0.0038791806437075138, 0.0029199337586760521, 0.0032784945797175169, 0.007620618212968111, 0.0030359125230461359, 0.0062104184180498123, 0.0036345657426863909, 0.00035211615613661706, 0.0027401214465498924, 0.0076295826584100723, 0.0044385930523276329, 0.0049276826903223991, 0.0029789828695356846, 0.0043608769774436951, 0.0024329402949661016, 0.0054446873255074024, 0.0035613048821687698, 0.0068262661807239056, 0.0032005296088755131, 0.0041605280712246895, 0.0033689711708575487, 0.0054505849257111549, 0.0027372741606086493, 0.0027064245659857988, 0.002129468834027648, 0.0041707041673362255, } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data38[8] = { -7330, -3648, 14418, -10236, 22712, 9404, -8884, 13272, };
const TfArray<8, float> quant38_scale = { 8, { 0.00016672034689690918, 0.00019746535690501332, 0.0001394490827806294, 0.00023395712196361274, 0.00018470319628249854, 0.00012459968274924904, 0.00018118163279723376, 0.00019073903968092054, } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&g0::quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data39[8*1*1*16] = { 
  /* [0][0][][] */ -1,-2,-28,-50,-13,-21,7,-6,24,18,-19,6,91,127,-29,-108, 
  /* [1][0][][] */ 127,-53,-34,5,-39,67,-87,-59,-55,80,-25,-45,-21,-8,-81,-8, 
  /* [2][0][][] */ -52,-118,58,32,38,-73,-97,-36,20,-109,41,-127,35,-37,-71,38, 
  /* [3][0][][] */ 44,2,23,25,-1,54,-58,-9,127,32,0,11,13,-22,1,11, 
  /* [4][0][][] */ -97,-20,-36,-127,-21,48,61,-92,15,-3,-28,-21,-121,14,-22,-8, 
  /* [5][0][][] */ 83,42,63,-16,67,-39,-127,-123,-5,-71,89,70,-50,71,88,-65, 
  /* [6][0][][] */ 110,50,-127,-56,12,-81,-10,-68,-51,4,-100,72,69,-94,-8,52, 
  /* [7][0][][] */ -127,8,118,-18,-59,-8,9,-78,-44,79,81,-47,79,-17,21,20, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant39_scale = { 8, { 0.0078512942418456078, 0.0092991562560200691, 0.0065670195035636425, 0.011017648503184319, 0.0086981533095240593, 0.0058677229098975658, 0.0085323136299848557, 0.0089823966845870018, } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&g0::quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data40[16] = { 25761, -1161, -193, 3581, -1242, 557, 13488, 2039, -165, 275, -3471, 4277, 3052, -1239, -978, -1874, };
const TfArray<16, float> quant40_scale = { 16, { 8.5243191279005259e-05, 0.00015138664457481354, 0.00019375675765331835, 0.00013121122901793569, 0.00075405061943456531, 0.00053368188673630357, 0.00012385933951009065, 0.00049076287541538477, 0.00023946630244608968, 0.00068310776259750128, 0.00013653778296429664, 0.00011677602742565796, 7.9696088505443186e-05, 0.00025884332717396319, 0.00021173022105358541, 0.00035797143937088549, } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data41[1*3*3*16] = { 
  /* [0][0][][] */ 13,7,-6,15,-11,15,-4,11,3,-15,11,4,-14,-1,11,-8, -3,-15,11,14,20,3,0,-33,1,6,-15,111,-21,25,-6,-7, -8,6,6,-8,9,-9,-12,6,-5,-1,-14,4,-11,1,-14,-8, 
  /* [0][1][][] */ 4,-19,-8,14,127,-19,-127,-28,127,127,-11,8,88,-17,10,-27, -127,127,127,9,-75,-84,-4,-112,9,-112,127,127,127,127,127,127, 11,8,-15,10,-3,127,13,-16,6,-16,-16,9,-4,2,0,-16, 
  /* [0][2][][] */ 11,8,9,-26,-10,20,59,1,-1,-12,-12,-15,-17,7,6,-19, 34,-24,5,-127,13,-11,-19,127,-12,-2,-9,-2,-21,-48,4,-45, 13,7,6,7,8,0,9,-8,8,6,-13,14,12,1,4,-20, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant41_scale = { 16, { 0.0042833574116230011, 0.0076069780625402927, 0.0097360201179981232, 0.0065931901335716248, 0.03789004310965538, 0.026816807687282562, 0.0062237675301730633, 0.024660184979438782, 0.012032864615321159, 0.034325260668992996, 0.0068608424626290798, 0.0058678407222032547, 0.0040046228095889091, 0.013006534427404404, 0.010639162734150887, 0.017987590283155441, } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&g0::quant8_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data42[16] = { 1151, 361, 12, 4583, 101695, 100664, 16366, 61466, 7887, 88600, 2472, -725, 20401, 61318, -122, -12796, };
const TfArray<16, float> quant42_scale = { 16, { 8.5737214249093086e-05, 0.00017155725799966604, 0.00010963915701722726, 6.9628928031306714e-05, 1.0082007065648213e-05, 1.0270015081914607e-05, 4.9086120270658284e-05, 1.4323537470772862e-05, 7.8865552495699376e-05, 1.2306874850764871e-05, 0.00014349997218232602, 0.00014765317609999329, 8.5436578956432641e-05, 1.3194264283811208e-05, 0.00013570634473580867, 2.4095927074085921e-05, } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data43[16*3*3*1] = { 
  /* [0][0][][] */ -74, -97, -21, 
  /* [0][1][][] */ 70, -28, 23, 
  /* [0][2][][] */ 37, 127, 25, 
  /* [1][0][][] */ 117, -93, -5, 
  /* [1][1][][] */ -127, 116, 31, 
  /* [1][2][][] */ 21, 5, -7, 
  /* [2][0][][] */ -18, 2, -41, 
  /* [2][1][][] */ 39, 96, 127, 
  /* [2][2][][] */ -7, -86, -71, 
  /* [3][0][][] */ 122, 127, 62, 
  /* [3][1][][] */ 8, -14, -7, 
  /* [3][2][][] */ -90, -115, -35, 
  /* [4][0][][] */ 6, -33, -16, 
  /* [4][1][][] */ 6, -127, 18, 
  /* [4][2][][] */ -3, -90, -27, 
  /* [5][0][][] */ -51, 53, -22, 
  /* [5][1][][] */ -127, 59, -16, 
  /* [5][2][][] */ -118, 50, -20, 
  /* [6][0][][] */ -27, 76, 127, 
  /* [6][1][][] */ -63, 50, -26, 
  /* [6][2][][] */ -48, -65, -104, 
  /* [7][0][][] */ 67, 55, 4, 
  /* [7][1][][] */ 127, 105, 14, 
  /* [7][2][][] */ 59, 26, -7, 
  /* [8][0][][] */ -27, -37, 50, 
  /* [8][1][][] */ -61, -95, 127, 
  /* [8][2][][] */ -32, -69, 95, 
  /* [9][0][][] */ -11, 43, 3, 
  /* [9][1][][] */ -3, 127, -27, 
  /* [9][2][][] */ 7, 112, 6, 
  /* [10][0][][] */ 29, 94, 16, 
  /* [10][1][][] */ -34, -127, -26, 
  /* [10][2][][] */ 16, 45, 22, 
  /* [11][0][][] */ 11, -14, 14, 
  /* [11][1][][] */ 67, -86, 38, 
  /* [11][2][][] */ -78, 127, -40, 
  /* [12][0][][] */ -37, 56, -5, 
  /* [12][1][][] */ -127, 124, 11, 
  /* [12][2][][] */ -76, 87, 0, 
  /* [13][0][][] */ 36, -9, 15, 
  /* [13][1][][] */ 127, 57, 19, 
  /* [13][2][][] */ 84, 109, 2, 
  /* [14][0][][] */ -27, -24, 55, 
  /* [14][1][][] */ 51, 107, -127, 
  /* [14][2][][] */ -12, -68, 89, 
  /* [15][0][][] */ -92, -2, 37, 
  /* [15][1][][] */ -127, -83, 35, 
  /* [15][2][][] */ 2, -41, 15, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 16,3,3,1 } };
const TfArray<16, float> quant43_scale = { 16, { 0.02186298742890358, 0.043747097253799438, 0.027957983314990997, 0.017755376175045967, 0.002570911543443799, 0.0026188537012785673, 0.012516959570348263, 0.0036525018513202667, 0.020110715180635452, 0.0031382529996335506, 0.036592490971088409, 0.037651557475328445, 0.021786326542496681, 0.0033645371440798044, 0.034605115652084351, 0.0061444612219929695, } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.01990102231502533, } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&g0::quant0_zero, 0 };
const TfArray<1, float> quant45_scale = { 1, { 0.02123476006090641, } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&g0::quant0_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.055079218000173569, } };
const TfArray<1, int> quant46_zero = { 1, { 10 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&g0::quant0_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,49,49,48 } };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,24,24,48 } };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.078288964927196503, } };
const TfArray<1, int> quant50_zero = { 1, { -24 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<1, float> quant53_scale = { 1, { 0.09136875718832016, } };
const TfArray<1, int> quant53_zero = { 1, { -4 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<1, float> quant54_scale = { 1, { 0.11445478349924088, } };
const TfArray<1, int> quant54_zero = { 1, { -54 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,25,25,48 } };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,12,12,48 } };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.076623342931270599, } };
const TfArray<1, int> quant58_zero = { 1, { -19 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant61_scale = { 1, { 0.084337882697582245, } };
const TfArray<1, int> quant61_zero = { 1, { 11 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<1, float> quant62_scale = { 1, { 0.11839728057384491, } };
const TfArray<1, int> quant62_zero = { 1, { -9 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<1, float> quant65_scale = { 1, { 0.069992274045944214, } };
const TfArray<1, int> quant65_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<1, float> quant66_scale = { 1, { 0.1688569039106369, } };
const TfArray<1, int> quant66_zero = { 1, { -13 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.099423885345458984, } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&g0::quant0_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,2 } };
const TfArray<1, float> quant69_scale = { 1, { 0.44023928046226501, } };
const TfArray<1, int> quant69_zero = { 1, { -81 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&g0::quant0_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,37,36 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,35,34 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,32 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,31,30 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,29,28 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,27,26 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,25,24 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,23,22 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,21,20 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,19,18 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,17,16 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,15,14 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,13,12 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,11,10 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,9,8 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,7,6 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,5,4 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,3,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 9216, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension44, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension44, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension47, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension48, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 55296), (TfLiteIntArray*)&g0::tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension56, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension57, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36912), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 16128), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension68, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 288), (TfLiteIntArray*)&g0::tensor_dimension69, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension69, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 71, };
const size_t tflNodes_subgraph_index[] = {0, 27, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  70, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_6_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_6_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_6_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_6_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_6_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
